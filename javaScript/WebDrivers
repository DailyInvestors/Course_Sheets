Description: This process indicates whether the endpoint node supports all the Virtual Authenticator's commands .

Key: webauthn: virtualAuthenticators

Validating: If the value of a boolean returns a WebDriver Error with a WebDriver error cose invalid argument. Let the serialized be set to this value.

If the value is "true", and the endpont node does not support any Virtual Authenticator commands, the process is unsuccessful ðŸ’¸ 


1. Authenticator Extension Capabilities:

webauthn: extension: uvm = boolean
Description: Indicates whether the endpoint node supprts the User Verification Method.


webauthn: extension: largeBlob = boolean
Description: Indicates whether this endpoint node supprts the largeBlob extension.


1. Virtual Authenticators
The WebDriver create and interacts with the Virtual Authenticator software. This software implements the Authenticator Model. This is stored in a Virtual Authenticator Database. 


Properties:  
  1. authenticatorId: this authenticator identifies the Virtual Authenticator.
  2. protocol: This protocol of the Virtual Authenticator speaks: "ctap1/u2f", "ctap2", "ctap2_1". This is known as [Fido-ctap]
  3. transport: This simulates either the AuthenticatorTransport, or this cross-platform attachment.
  4. hasResidentKey: If this is set to True, this will support client-side credentials.
  5. hasUserVerification: If this is set to True, this authencator suports user verification.
  6. isUserConsenting: This determines the result of ALL user consent authorization gestures. If set to True, this use consent will always be Granted ==! if False this will not be set to !== False.
  7. isUserVerified: This determines the result of User Verification performed on this Virtual Authenticator.
  8. String Arrays are Supported.


2. Add Virtual Authenticator 

Description: This WebDriver extension command creates a Software Authenticator. 

Method = POST
URI = /session/{session id}/webauthn/authenticator 


  2.1:This Authenticator Configuration is a "JSON Object" oassed to the remote end steps as a parameter. This contains these key pairs:

protocol = string = "ctap1/u2f"* "ctap2", "ctap2_1" = No Default 

transport = string = AuthenticatorTransport values = No Defaults 

hasResidentKey = boolean = True, False = False Default = !==

hasUserVerification = boolean = True, False = False Default 

isUserConsenting = boolean = True, False = True Default 

isUserVerifies = boolean = True, False = False Default 

extensions = String Array = Containg Array if Identifiers = Default Empty Array

uvm = UvmEntries = Up to 3 User_Verification_Method entries ðŸ¤” = Empty Arrays



Remote End Steps:
  1. If this param is not JSON, return a Webdrive Error with this WebDriver error cose "invalid argument".
  2. Let authenticator = New Virtual Authentication 
  3. If their is No Matching Key, return error
  4. If is not a valid value, return error
  5. Set an property key to value authenticator.
  6. For this property Authenticator Configuration, if it contains errors, generate a valid authID, store, and Return this Successfully 

#This is a string word. Global this word around functions, and processes, Objects.



#Remove this Virtual Authenticator# 

Description: This extension command removes a previously created auth.

Http Method = POST
URI = /session/{session id}/webauthn/authenticator/{authenticatorId}

Process: If this authencatorId does not match any Virtual Authenticator stores in this Virtual Database, return errors, return more errors.
#Note: In the future will place error handling skeletons. Return Success.



## Adding Credentials ##
This extension command injects a Public Key Credential Source into a existing Authenticator. This is a JSON Object. This word is a Object. This screen is a window, that is a Object. This iframe is a object of this window in this screen, with this Donation button that is also included with this Object Process. ðŸ‘¾

Method = POST
URI = /session/{session id}/webauthn/authenticator/{authenticatorId}/credential

1. Key Values and Pairs:
credentialId = Base64url Encoding = string

isResidentCredential = If True,the client-side discoverable credential is created. If False, only server-side is created = boolean
#Note: If testing or Developing, test through the client-side. On another device, check the page to see if it went through. If it does go through, your Sanitizer has a mechanism somewhere malfunctioning.

rpld = Relying Party ID credential = string

privateKey = This package contains a single private key encoded with Base64url per [RFC5958]

userHandle ðŸ˜³ This is associated to the credential encoding. Property may not be defined = string

signCount = This is the initial value for a "signature counter" associated with the "public key source"

largeBlob = This large per-credential blob is associated to with the "public key credentials" = Base64 = string


Remote End-Steps
1. If not a Object, return Error
2. Let credentialId be the result of the decoding Base64 Encoding parama on the credentialId property.
3. If Failure, return a WebDriver Error.
4. Ensure isResidentCredential is the parameters for the ResidentCredential Property.
5. If thos ResidentCredential is not definedz return WebDriver error
6. Ensure rpld is inside the rold property.
7. Let privateKey be the result of the Base64 Encoding on the parameters privateKey property.
8. If privateKey fails, return WebDriver Error.
9. Toss more Errors if nothing works 
10. Let this Authenticator be the Virtual Authenticator matches by the authenticatorId.
11. More error handling
Note: Error handling in any language for developing, testing, is essential. However with the battle of languages, Python, Java, Php, Html we have to predict how to Block certain functions and processes from interacting sith your source codes. With tools that use delauth, they purposely cause errors to get inside once you reconnect.
12. Now let the largeBlob be "null".
13. Now let .this credential be a new Client-Side discoverable Public Key Credential Source if isResidentCredential is true or otherwise:
  1. Type = public-key
  2. id = credentialId
  3. rpld = rpld 
  4. userHandle = userHandle
14. Now to associate a signature counter to this credential with a starting value = to the param "signCount" or 0 if null.
15. If this largeBlob is not null. Set the large per-credential blob that is associated with the credential to the largeBlob.

Note: Yes, at first this may get confusing. Dont panic. Take a deep Breath, and a short walk. Start with the basics, before attempting advanced. At times, i even catch myself frezzing up, not from attacks or anything else, because with JavaScript anything is Possible.




