â€¢â€¢â€¢ Bash Notes from Google Style Guide ðŸ“šðŸ‘¾â€¢â€¢â€¢

References: Gemini 
            Google Style Guide
            GitHub

"https://www.shellcheck.net/"

"https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html"

"https://google.github.io/styleguide/shellguide.html#quoting"

"https://google.github.io/styleguide/shellguide.html#arrays"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Omit Forloop:

for arg in "$@"; do
  echo "argument: ${arg}"
done

ðŸš¨Omit Forloop: 
This code snippet takes command-line arguments && prints each one on a new line, prefaced by "argument: ". The for...in "$@" construct is the standard, explicit way to iterate over all passed arguments in a Bash script, ensuring that even arguments containing spaces are handled correctly due to the double quotes around $@.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢â€¢ Case Statements â€¢â€¢â€¢

â€¢â€¢Example1:

case "${expression}" in
  a)
    variable="â€¦"
    some_command "${variable}" "${other_expr}" â€¦
    ;;
  absolute)
    actions="relative"
    another_command "${actions}" "${other_expr}" â€¦
    ;;
  *)
    error "Unexpected expression '${expression}'"
    ;;
esac


â€¢â€¢Example2: "Single Commands"

verbose='false'
aflag=''
bflag=''
files=''
while getopts 'abf:v' flag; do
  case "${flag}" in
    a) aflag='true' ;;
    b) bflag='true' ;;
    f) files="${OPTARG}" ;;
    v) verbose='true' ;;
    *) error "Unexpected option ${flag}" ;;
  esac
done



ðŸš¨â€¢â€¢â€¢Answere Example1:
Example 1: Conditional Action
This code snippet uses a case statement to perform different actions based on the value of expression. It sets variables and executes specific commands for distinct case matches (a, absolute), handling any unlisted values with a default error. This provides a structured way to manage multiple conditional flows.â€¢â€¢â€¢

ðŸš¨â€¢â€¢â€¢Answere Example2:
Example 2: 
This getopts example is incomplete because it defines how to parse command-line options (-a, -b, -f, -v) but lacks the shift command to process the remaining non-option arguments. Without shift $((OPTIND - 1)), the script will only handle flags and their arguments, failing to properly access any subsequent positional arguments (like filenames) passed on the command line.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Variable Expansionâ€¢â€¢

â€¢â€¢â€¢It is best to be consistent with what you find. Quote your variables: Prefer "${var}" over "$var". This is the Google Best Practice.â€¢â€¢â€¢

â€¢â€¢ Try brace-delimiting over all  variables.

â€¢â€¢Example1:
# Section of *recommended* cases.

# Preferred style for 'special' variables:
echo "Positional: $1" "$5" "$3"
echo "Specials: !=$!, -=$-, _=$_. ?=$?, #=$# *=$* @=$@ \$=$$ â€¦"

# Braces necessary:
echo "many parameters: ${10}"

# Braces avoiding confusion:
# Output is "a0b0c0"
set -- a b c
echo "${1}0${2}0${3}0"

# Preferred style for other variables:
echo "PATH=${PATH}, PWD=${PWD}, mine=${some_var}"
while read -r f; do
  echo "file=${f}"
done < <(find /tmp)


â€¢â€¢Example2:

# Section of *discouraged* cases

# Unquoted vars, unbraced vars, brace-delimited single letter
# shell specials.
echo a=$avar "b=$bvar" "PID=${$}" "${1}"

# Confusing use: this is expanded as "${1}0${2}0${3}0",
# not "${10}${20}${30}
set -- a b c
echo "$10$20$30"

ðŸš¨ Answer1- Example1:
Example 1: 
This code demonstrates robust Bash variable handling by showcasing preferred styles for positional and special parameters, and the necessity of curly braces for positional parameters beyond nine (e.g., ${10}) or to avoid ambiguity (e.g., ${1}0). It also correctly iterates through find results using while read -r and process substitution, ensuring proper file handling.


ðŸš¨ Answere2-Example2:
Example 2: 
This code is problematic due to unquoted variable expansions (e.g., a=$avar), which can lead to word splitting and globbing issues. It also attempts invalid brace-delimited shell specials (e.g., ${$} instead of $$) and uses confusing unbraced positional parameter expansions (e.g., $10), which Bash interprets as $1 followed by 0, rather than the 10th argument.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Quotingâ€¢â€¢

â€¢â€¢Always "quote strings" containing variables, command substitutions, spaces && shell meta charactersâ€¢â€¢

â€¢â€¢We can use "arrays" for quoting of (lists of elements), && (command-line flags)â€¢â€¢

â€¢â€¢ It is a optional practice to quote special characters.â€¢â€¢

â€¢â€¢Example1: "Quotes"

# 'Single' quotes indicate that no substitution is desired.
# "Double" quotes indicate that substitution is required/tolerated.

# Simple examples

# "quote command substitutions"
# Note that quotes nested inside "$()" don't need escaping.
flag="$(some_command and its args "$@" 'quoted separately')"

# "quote variables"
echo "${flag}"

# Use arrays with quoted expansion for lists.
declare -a FLAGS
FLAGS=( --foo --bar='baz' )
readonly FLAGS
mybinary "${FLAGS[@]}"

# It's ok to not quote internal integer variables.
if (( $# > 3 )); then
  echo "ppid=${PPID}"
fi

# "never quote literal integers"
value=32
# "quote command substitutions", even when you expect integers
number="$(generate_number)"

# "prefer quoting words", not compulsory
readonly USE_INTEGER='true'

# "quote shell meta characters"
echo 'Hello stranger, and well met. Earn lots of $$$'
echo "Process $$: Done making \$\$\$."

# "command options or path names"
# ($1 is assumed to contain a value here)
grep -li Hugo /dev/null "$1"

# Less simple examples
# "quote variables, unless proven false": ccs might be empty
git send-email --to "${reviewers}" ${ccs:+"--cc" "${ccs}"}

# Positional parameter precautions: $1 might be unset
# Single quotes leave regex as-is.
grep -cP '([Ss]pecial|\|?characters*)$' ${1:+"$1"}

# For passing on arguments,
# "$@" is right almost every time, and
# $* is wrong almost every time:
#
# * $* and $@ will split on spaces, clobbering up arguments
#   that contain spaces and dropping empty strings;
# * "$@" will retain arguments as-is, so no args
#   provided will result in no args being passed on;
#   This is in most cases what you want to use for passing
#   on arguments.
# * "$*" expands to one argument, with all args joined
#   by (usually) spaces,
#   so no args provided will result in one empty string
#   being passed on.
#
# Consult
# https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html and
# https://mywiki.wooledge.org/BashGuide/Arrays for more

(set -- 1 "2 two" "3 three tres"; echo $#; set -- "$*"; echo "$#, $@")
(set -- 1 "2 two" "3 three tres"; echo $#; set -- "$@"; echo "$#, $@")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Command Substitutionsâ€¢â€¢

â€¢â€¢ We should use $(command) instead of a backtick.â€¢â€¢

â€¢â€¢Nested backticks require escaping the inner ones with \ 
The $(command) format will not change.â€¢â€¢

â€¢â€¢Example:
# This is preferred:
var="$(command "$(command1)")"

# This is not:
var="`command \`command1\``"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢[[ â€¦ ]] is preferred over [ â€¦ ], test, && /usr/bin.â€¢â€¢â€¢

â€¢â€¢[[ â€¦ ]] will also reduce the errors as no path expansion or word splitting will take place between [[ and ]].â€¢â€¢â€¢

â€¢â€¢[[ â€¦ ]] also allows for pattern and regular expression matching, while [ â€¦ ] does not.â€¢â€¢â€¢

â€¢â€¢Example1:

# This is the correct example.
if [[ "filename" =~ ^[[:alnum:]]+name ]]; then
  echo "Match"
fi

# This matches the exact pattern "f*" (Does not match in this case)
if [[ "filename" == "f*" ]]; then
  echo "Match"
fi


â€¢â€¢Example2: "Bad Example"

# This gives a "too many arguments" error as f* is expanded to the
# contents of the current directory. It might also trigger the
# "unexpected operator" error because `[` does not support `==`, only `=`.

if [ "filename" == f* ]; then
  echo "Match"
fi


ðŸš¨ Answer1-Example1:
Example 1: 
This code correctly demonstrates two distinct Bash pattern matching operators: =~ for regex matching (e.g., ^[[:alnum:]]+name finds "filename" because it starts with alphanumeric characters followed by "name") and == for glob (wildcard) matching. While the glob example f* doesn't match "filename" exactly, the structure for both is syntactically correct for their intended purposes.


ðŸš¨ Answer2-Example2:
Example 2:
This code fails because the [ ] (test) command treats f* as a glob pattern that expands to actual filenames in the current directory, potentially leading to a "too many arguments" error. Furthermore, [ ] only supports the single-equals = for string comparison, not the double-equals ==, resulting in an "unexpected operator" error.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢â€¢Testing Stringsâ€¢â€¢â€¢

â€¢â€¢â€¢ We can use these tests for empty/non-empty strings.â€¢â€¢â€¢

â€¢â€¢Example 1: "Correct Way"

# Do this:
if [[ "${my_var}" == "some_string" ]]; then
  do_something
fi

# -z (string length is zero) and -n (string length is not zero) are
# preferred over testing for an empty string

if [[ -z "${my_var}" ]]; then
  do_something
fi

# This is OK (ensure quotes on the empty side), but not preferred:

if [[ "${my_var}" == "" ]]; then
  do_something
fi



â€¢â€¢ Example2: "Bad Way"

# This is the incorrect way:

if [[ "${my_var}X" == "some_stringX" ]]; then
  do_something
fi


ðŸš¨ Answer1-Example1:
Example 1:
This code works because it consistently uses double square brackets [[ ]] for string comparisons, which are safer and more robust than single brackets [ ]. It correctly demonstrates comparing a variable to a specific string ("some_string"), and critically, uses the preferred -z operator for explicitly checking if a string is empty, ensuring reliable and readable conditional logic.


ðŸš¨ Answer2-Example2:
Example 2: 
This code is an incorrect and discouraged practice because adding a sentinel character like X (e.g., "${my_var}X") is unnecessary and introduces potential bugs. This workaround was used in older [ ] (single bracket) tests to prevent errors with empty strings, but [[ ]] (double brackets) correctly handles empty strings without such concatenation, making it redundant and confusing here.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢ To help us avoid errors && confusion explicitly use -z or -n.â€¢â€¢

â€¢â€¢Example1: "Correct Way"

# Try this
if [[ -n "${my_var}" ]]; then
  do_something
fi

â€¢â€¢Example2: "Incorrect"
# Don't use this
if [[ "${my_var}" ]]; then
  do_something
fi

â€¢â€¢We should use "==" for equality instead of =. Although both will work.â€¢â€¢

â€¢â€¢< and > in [[ â€¦ ]] performs a lexicographical comparison.â€¢â€¢

â€¢â€¢ (( â€¦ )) or -lt and -gt for numerical comparison.â€¢â€¢â€¢

â€¢â€¢Example1: "Correct"
# Correct way
if [[ "${my_var}" == "val" ]]; then
  do_something
fi

if (( my_var > 3 )); then
  do_something
fi

if [[ "${my_var}" -gt 3 ]]; then
  do_something
fi


â€¢â€¢â€¢Example2: "Incorrect Way"
# Don't Use

if [[ "${my_var}" = "val" ]]; then
  do_something
fi

# Probably unintended lexicographical comparison.
if [[ "${my_var}" > 3 ]]; then
  # True for 4, false for 22.
  do_something
fi


ðŸš¨ Answer1-Example1:
Example 1:
This code works by employing the recommended [[ -n "${my_var}" ]] for robustly checking if a string variable is non-empty. It also correctly demonstrates Bash's powerful (( ... )) arithmetic expansion for numerical comparisons (e.g., my_var > 3) and the -gt operator within [[ ]] for integer comparisons, ensuring reliable conditional logic.


ðŸš¨::Answer2-Example2:
Example 2: 
This code is problematic because while [[ "${my_var}" = "val" ]] for string equality works, == is the preferred and clearer operator. More critically, [[ "${my_var}" > 3 ]] performs a lexicographical (alphabetical) string comparison, not a numerical one, meaning "22" is considered less than "3", leading to unintended and incorrect results for numerical values.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢ Wild-Card Expansions â€¢â€¢
â€¢â€¢ When doing a Wild-Card expansion, use a explicit path for the file.â€¢â€¢â€¢

Here's the  directory:
# -f  -r  somedir  somefile

# Incorrectly deletes almost everything in the directory by force
psa@bilby$ rm -v *
removed directory: `somedir'
removed `somefile'

# As opposed to:
psa@bilby$ rm -v ./*
removed `./-f'
removed `./-r'
rm: cannot remove `./somedir': Is a directory
removed `./somefile'

#Or this way
rm -rf path/file

Then depending on the output, we can use awk to process/pipe the data.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Evalâ€¢â€¢
â€¢â€¢Usijg eval incorrectly could cause errors.â€¢â€¢
â€¢â€¢ This consums up your variables, and at times could make it impossible to check what it did.â€¢â€¢â€¢

# What does this set?
# Did it succeed? In part or whole? In this one eval will set the variable 

eval $(set_my_variables)




# What happens if one of the returned values has a space in it?

variable="$(eval some_function)




â€¢â€¢â€¢â€¢Answersâ€¢â€¢â€¢
ðŸš¨ Example 1: eval $(set_my_variables)
This command executes shell variable assignments that are dynamically generated by the set_my_variables function. It effectively sets new variables in the current shell context based on that function's output. Success hinges on set_my_variables producing valid shell syntax.

ðŸš¨ Example 2: variable="$(eval some_function)"
This command captures the standard output of some_function into a variable, but crucially, it first executes some_function via eval. All spaces and characters in some_function's output are preserved as a single string. Using eval here is generally risky unless the output is completely trusted, as it executes some_function's output as code.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢â€¢Arraysâ€¢â€¢â€¢ðŸ§¬
â€¢â€¢Arrays should be used to store Lists of elements.â€¢â€¢
â€¢â€¢Stores a Ordered collection of Strings.â€¢â€¢

â€¢â€¢â€¢Example1:
# An array is assigned using parentheses, and can be appended to
# with +=( â€¦ ).
declare -a flags
flags=(--foo --bar='baz')
flags+=(--greeting="Hello ${name}")
mybinary "${flags[@]}"

ðŸš¨ Answer1-Example1:
This code will work correctly. It properly initializes and appends to a Bash array using parentheses () and +=(). Crucially, it then expands the array for mybinary using "${flags[@]}", which correctly passes each element as a separate, individually quoted argument, ensuring spaces within elements are preserved.


â€¢â€¢â€¢Example2:
# Donâ€™t use strings for sequences.
flags='--foo --bar=baz'
flags+=' --greeting="Hello world"'  # This wonâ€™t work as intended.
mybinary ${flags}

ðŸš¨ Answer2-Example2:
This code will not work as intended because it treats command-line arguments as a single string rather than a proper array. When mybinary ${flags} is executed, Bash performs word splitting on the flags string, causing --greeting="Hello world" to be split into two separate arguments (--greeting="Hello and world") instead of one, breaking the intended option.


â€¢â€¢â€¢Example3:
# Command expansions return single strings, not arrays. Avoid
# unquoted expansion in array assignments because it wonâ€™t
# work correctly if the command output contains special
# characters or whitespace.

# This expands the listing output into a string, then does special keyword
# expansion, and then whitespace splitting.  Only then is it turned into a
# list of words.  The ls command may also change behavior based on the user's
# active environment!
declare -a files=($(ls /directory))

# The get_arguments writes everything to STDOUT, but then goes through the
# same expansion process above before turning into a list of arguments.
mybinary $(get_arguments)

ðŸš¨ Answer3-Example3:
This code will not work reliably. The unquoted command substitutions $(ls /directory) and $(get_arguments) cause their output to undergo word splitting and globbing by Bash. This means that filenames or arguments containing spaces, newlines, or wildcard characters will be incorrectly split into multiple array elements or arguments, or even expanded into file paths, leading to unexpected and broken behavior.

ðŸš¨ Note: Use quoted expansion  "${array[@]}" to access arrays.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢â€¢Pipes to whileâ€¢â€¢â€¢







~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Will Continue this at a later time and date. With any education,bWe have to remember to never get sidetracked. Next in my opinion, I have already read several books on this Language. To become fluent with this, it takes more then one day, takes more then one lesson or Book. But going through everything and taking baby steps. Studies will show it takes around a Year to Two to become fully fluent, doing it the way that I am. 

ðŸš¨Note: This book was discovered on the Wikipedia Page, and the book is created and Published by Google and GitHub. These are just my Self-Help guide for general education, and to keep forcing it into my mind.

We appreciate any and all Donations, to help us with our Research. If you wish to have Custom repoabbuilt just for you, just ask. If you wish to have your Business name in our Projects, Licenses, just ask. Thank You
