••Validating Forms°°

⚠️References: 

"https://web.dev/learn/forms/auto"

"https://web.dev/learn/forms/validation##javascript"

"https://developer.mozilla.org/docs/Web/API/Constraint_validation"

"https://web.dev/learn/forms/javascript#ensure_users_are_notified_about_errors_in_real_time"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

✨ This Cheat-Guide is designed to Validate the Front End of the Server. You must focus on the Backend at a later time.✨

••Required••
°°° We can use HTML to help specify the format, and constraints.
Example:
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name (required)</label>
        <input required type="text" id="name" name="name">
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value:
button {
  margin-top: 1rem;
}

•••When using this, the "required" causes a error.
Example:
<label for="name">Name (required)</label>
<input required type="text" id="name" name="name">
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. All browsers display and use different text for their Errors.

2. Wording may be different depending on the language.

3. We can use jS, to change the type of error.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
•• Required Email••

Example:
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="email">Email (required)</label>
        <input required type="email" id="email" name="email">
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value:
button {
  margin-top: 1rem;
}

1. When validating, check each submission. Try with no words, try with characters, try with different emails. 

2. Compare all the differences of each Validation.

3. If you see a Error. Try to recreate. Why is this here? Can we change this? Should we? Is it a Bug? Can it lead to Privilege Escalation?

4. Browsers will also test the format of <type>.

5. Validate the see the authencity of the email. Is it real? Timedate? 

6. Remember to Never use a Global object, unless explicitly having to.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7. Now that you made a attribute/element "required", how can we ensure Password Rule Sets???

••Example: 
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="password">Password (required)</label>
        <input required type="password" id="password" name="password"aria-describedby="password-validation">
        <span id="password-validation" class="validation-message">Please use at least eight characters.</span>
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value:
button {
  margin-top: 1rem;
}

.validation-message {
  display: block;
  padding-top: 0.4em;
}

label {
  font-size: 1.3em;
}

7.1 Enforcing 8 character Minimum:
••Example:
<label for="password">Password (required)</label>
<input required="" minlength="8" type="password" id="password" name="password">

7.2 The name of this attribute is <minlength>. With setting the value to 8, you now have a validation rule. If you want the opposite, use <maxlength>.

8. For numerical input, we can use <min> & <max> to achieve the same result.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9. It is a best practice to try and ensure your users, & Testers know and understand your Validation Rules. To do this we can add a <aria-describedby> attribute to a element using the id of the form.
••Example:
<label for="password">Password (required)</label>
<input required minlength="8" type="password" id="password"
  name="password" aria-describedby="password-minlength">
<div id="password-minlength">Enter at least eight characters</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
••Pattern Attribute°°
10. At times, we may want to create advanced validation rules. We can use a HTML attribute. This is called a <pattern>. We can define a regular expression as the value.

••Example:
<label for="monster">What is your favorite monster? (required)</label>
<input required pattern="[a-z]{2,20}" type="text" id="monster" name="monster">

🚨In this lowercase letters are required.

°°Looking at the example above, how can we now change this to also require Upercase letters??
  °We can achieve this by manipulating the code, by editing and adding  pattern="[a-zA-Z]{2,20}"⚠️
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
•••Styling Form Fields with CSS°°
11. We can achieve staying in our forms, by making these required!

°°Example:
We can style these required fields using the :required CSS pseudo class.°°°

••Example:
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name (required)</label>
        <input required type="text" id="name" name="name">
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value:
button {
  margin-top: 1rem;
}

input:required {
  border: 2px solid;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
12. Now we can use the 
:invalid pseudo-class 
to add styles to any invalid form control. We can also use the 
:valid pseudo-class
for styling valid form elements.

••Example:
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name (required)</label>
        <input required type="text" id="name" name="name">
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value:
button {
  margin-top: 1rem;
}

input:invalid {
  border: 2px solid red;
}

13. Never use colors to validate errors or describe. We have devices that may be malfunctioning, Humans can be color blind, and malicious attackers may change these to scare off or trick their victims.

14. Use the 
:user-invalid pseudo-class 
over the 
:user-invalid tag 
because the :user-invalid has a set default as :user-invalid.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
•• Validation with jS°°

°° With all Browsers being different?? How can we create the same Error messages for all of our Users?

°We must use the setCustomValidity() method. This works off of the Constraint Validation API.°°°

Example:
const nameInput = document.querySelector('[name="name"]');

nameInput.addEventListener('invalid', () => {
    nameInput.setCustomValidity('Please enter your name.');
 });

⚠️ To learn this step by step:
1. First Query the element where you want to set the custom error message. 

2. Listen to the invalid event of your defined element. 

3.Set the message with setCustomValidity(). 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15. Here is a example for Please Enter your Username:
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="username">username (required)</label>
        <input required type="text" id="username" username="name">
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value:
button {
  margin-top: 1rem;
}

°° JS Value:
const usernameInput = document.querySelector('[username="name"]'); 

usernameInput.addEventListener('invalid', () => {  
  usernameInput.setCustomValidity('Please enter your username.');
});


15.1: Test with and without the JavaScript. 

15.2: Try on multiple browsera

15.3: Try with different usernames. Real and Moch.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
•••Real-Time Validation°°°
1.We can do this by listening to the "<onblur> event" of a form control. 

2.Then validate the input immediately when a user leaves a form field.

3. Validate also when a user comes to the Page.

Example:
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name</label>
        <input required minlength="10" type="text" id="name" name="name" aria-describedby="name-validation">
        <span id="name-validation" aria-live="assertive" class="validation-message"></span>
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

••CSS Value°°
button {
  margin-top: 1rem;
}

.validation-message {
  display: block;
  padding-top: 0.4em;
  color: red;
}

••JS Value:
document.addEventListener('blur', function (event) {
    // Validate the field
    const isValid = event.target.validity.valid;
    const message = event.target.validationMessage;
    const connectedValidationId = event.target.getAttribute('aria-describedby');
    const connectedValidation = connectedValidationId ? document.getElementById(connectedValidationId) : false;
  
    if (connectedValidation && message && !isValid) {
      connectedValidation.innerText = message;
    } else {
      connectedValidation.innerText = '';
    }
}, true);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
👾Security && Privacy🔏👾

🚨 References:

"https://web.dev/explore/secure#secure-connections-with-https"

"https://geekflare.com/http-to-https-redirection/"

"https://en.wikipedia.org/wiki/Query_string"

"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"

"https://web.dev/articles/sign-up-form-best-practices#federated-login"

"https://cloud.google.com/blog/products/identity-security/account-authentication-and-password-management-best-practices"

"https://en.wikipedia.org/wiki/California_Consumer_Privacy_Act"

"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3244203"

"https://en.wikipedia.org/wiki/General_Data_Protection_Regulation"

"https://www.w3.org/TR/app-privacy-bp/"

"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"

"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"

"https://benhoyt.com/writings/dont-sanitize-do-escape/"

"https://web.dev/articles/sanitizer"

"https://en.wikipedia.org/wiki/Internet_bot#Malicious_bots"

"https://www.google.com/recaptcha/about/"

"https://akismet.com/"

"https://soloist.ai/dailyinvestors"

"https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html"

"https://pages.nist.gov/800-63-3/sp800-63b.html"

"Perplexity"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
••HoneyPot Example••

<main>
  <div class="wrapper">
    <form>
      <label hidden class="honeypot" for="honeypot">
    Keep this field blank
      </label>
    <input hidden autocomplete="off" class="honeypot" id="honeypot" type="text" tabindex="-1" />
  </label>
      <div>
 <label for="email">Email</label>
        <input autocomplete="email" required type="email" id="email" name="email">
      </div>
      <div>
 <label for="password">Password</label>
        <input autocomplete="new-password" type="password" id="password" name="password">
      </div>
      <button>Submit</button>
    </form>
  </div>
</main>

••CSS Value:
 button {
  margin-top: 1rem;
}

label {
  display: block;
  margin-top: 1rem;
}

.honeypot {
  display: none;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
••• Basic Sanitizer •••

const sanitizer = new Sanitizer(); // Creates a default sanitizer
const unsafeHTML = 'Hello <script>alert("XSS")</script> World!';
const safeHTML = sanitizer.sanitize(unsafeHTML); // Removes <script> tag
console.log(safeHTML); // Output: Hello  World!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
••• Inserting Sanitized HTML into the DOM •••

const untrustedString = 'abc <script>alert(1)</script> def';
const target = document.getElementById('target');
target.setHTML(untrustedString); // Only safe HTML is inserted
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
••• Only Allow Certain Tags•••

const sanitizer = new Sanitizer({ elements: ['p', 'b', 'div'] });
const unsafeHTML = '<p>Safe</p><script>bad()</script><b>Bold</b>';
const safeHTML = sanitizer.sanitize(unsafeHTML);
// Only <p>, <b>, and <div> are kept; <script> is removed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
