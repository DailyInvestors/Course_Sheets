â€¢â€¢Accessibilityâ€¢â€¢

â€¢â€¢ References:

"https://www.sarasoueidan.com/blog/focus-indicators/"

"https://web.dev/visual-order-follows-dom"

"web.dev"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Built-In Form Elements Exampleâ€¢â€¢
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name</label>
<input type="text" id="name" name="name" required>

      </div>
      <div class="looks-like-label" for="name1">Name</div>
      <div id="name1" class="looks-like-input" contenteditable></div>
      <button>Save</button>
    </form>
  </div>
</main>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Defining Rules Exampleâ€¢â€¢
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name (required)</label>
        <input required minlength="8" type="text" id="name" name="name" aria-describedby="name-validation">
        <span id="name-validation" class="validation-message">Please use at least eight characters.</span>
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

â€¢â€¢CSS Valueâ€¢â€¢
button {
  margin-top: 1rem;
}

.validation-message {
  display: block;
  padding-top: 0.4em;
}

label {
  font-size: 1.3em;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
â€¢â€¢Errorsâ€¢â€¢

â€¢â€¢Example 1 Find Errorsâ€¢â€¢
<label for="name">Name</label>
<input type="text" name="name" id="name" required>

â€¢â€¢Example 2 Define Errorsâ€¢â€¢
<main>
  <div class="wrapper">
    <form>
      <div>
        <label for="name">Name</label>
        <input required minlength="10" type="text" id="name" name="name" aria-describedby="name-validation">
        <span id="name-validation" aria-live="assertive" class="validation-message"></span>
      </div>
      <button>Save</button>
    </form>
  </div>
</main>

â€¢â€¢CSS Valueâ€¢â€¢
button {
  margin-top: 1rem;
}

.validation-message {
  display: block;
  padding-top: 0.4em;
  color: red;
}

â€¢â€¢JS Valueâ€¢â€¢
ðŸš¨ Note: Best Practice, use as little JavaScript as nessicary.
â€¢Â°â€¢Â°â€¢Â°â€¢Â°â€¢.         â€¢Â°â€¢Â°â€¢Â°â€¢Â°Â°â€¢Â°â€¢Â°â€¢Â°â€¢
document.addEventListener('blur', function (event) {
    // Validate the field
    const isValid = event.target.validity.valid;
    const message = event.target.validationMessage;
    const connectedValidationId = event.target.getAttribute('aria-describedby');
    const connectedValidation = connectedValidationId ? document.getElementById(connectedValidationId) : false;
  
    if (connectedValidation && message && !isValid) {
      connectedValidation.innerText = message;
    } else {
      connectedValidation.innerText = '';
    }
}, true);


1. First with this we have to adjust it to make it better for connections.

2.When using <aria-live>, it will only announce the first error in the case of multiple errors.

3. We can use aria-live="assertive" for the error message.

4. A different approach to defining errors, is to explicitly announce them.

5. Most designers use :invalid pseudo-class to define their error colors.

â€¢â€¢Example 2 Define Errorâ€¢â€¢
<span class="error">
  <strong>Error:</strong>Please use at least eight characters.
</span>

6. You can change the visual order by manipulating your CSS.

7. We can override using the <:focus> CSS pseudo-class.

8.<:focus-visible> CSS pseudo-class to override the default <:focus>.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


â€¢â€¢â€¢Policies For Google Development:

"https://developers.google.com/site-policies"