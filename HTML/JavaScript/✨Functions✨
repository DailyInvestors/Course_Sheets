          âœ¨Functionsâœ¨
       ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹ðŸ”¹

ðŸš¨ References:  âœ¨Geminiâœ¨


"https://web.dev/learn/javascript/appendix#prototypal-inheritance"


"https://web.dev/learn/javascript/data-types/variable#function-scope"

"https://web.dev/learn/javascript/introduction#expressions"

"http://web.dev/" ðŸª²

"https://web.dev/learn/javascript/objects"

"https://en.wikipedia.org/wiki/First-class_citizen"


"https://web.dev/learn/javascript/data-types/variable#global-scope"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         â€¢â€¢â€¢Functionsâ€¢â€¢â€¢
1. Reusable Block of Statements.

ðŸ”¹ðŸ”¹Example1-Function:

function myFunction() {
   console.log( "This is my function." );
};




2. Here is a example of a strict model function:

ðŸ”¹ðŸ”¹Example2-StrictMode:

"use strict";
{
    myFunction();
    function myFunction() {
        console.log( "This is my function." );
    };
}
> "This is my function."




3. Scooping, or known as the process to which the declaration is  enclosed to the nearest function.

ðŸ”¹ðŸ”¹Example3-Scooping:

function myFunction() {
    function myNestedFunction() {
        console.log( "This is my nested function." );
    }
    myNestedFunction();
};

myFunction();
> "This is my nested function."

myNestedFunction();
>Uncaught ReferenceError: myNestedFunction is not defined




4. Function Calling or known as methods.

ðŸ”¹ðŸ”¹Example4-Calling:

function myFunction() {
   console.log( "This is my function." );
};

myFunction;
> myFunction() {
   console.log( "This is my function." );
}




5. A Parameter is basically a argument for that function.

ðŸ”¹ðŸ”¹Example5-Param:

function myFunction( myParameter ) {
   console.log( `The value is: ${ myParameter }.` );
};

myFunction( "this string" );
> "The value is: this string."




6. Omitted means basically setting the default param.

ðŸ”¹ðŸ”¹Example6-Omit:

function myFunction( myParameter = "omitted" ) {
   console.log( `The value is: ${ myParameter }.` );
};

myFunction( "this string" );
> "The value is: this string."

myFunction();
> "The value is: omitted."




7. In this example this is a non-arrow function. This is similar to an array.

ðŸ”¹ðŸ”¹Example7-Non-Arrow:

function myFunction() {
   console.log( arguments );
};

myFunction( 3, true, "My string" );
> Arguments { 0: 3, 1: true, 2: "My string", â€¦ }




8. A vardic function, is basically a different way to pass a argument.

ðŸ”¹ðŸ”¹Example8-VardicFunction:

function myFunction() {
    let result = "";
    for (let i = 0; i < arguments.length; i++) {
        result += arguments[i] + " - ";
    }
    console.log( result );
};

myFunction( "My first string", "My second string", "my third string" );\
> "My first string - My second string - my third string - "





9. "rest parameter" creates a (named paramete) that is initialized as a array that contains any arguments beyond those that are explicitly specified!

ðŸ”¹ðŸ”¹Example9-RestParam:

function myFunction( mySeparator, ...myStrings ) {
  console.log( myStrings.join( mySeparator ) );
};

myFunction( " - ", "My first string", "My second string", "my third string" );
> "My first string - My second string - my third string"



ðŸ”¹ðŸ”¹Example10-Rest&Arrow:

function myOuterFunction() {
    let myInnerArrowFunction = ( ...myParams ) => {
        console.log( myParams[ 0 ] );
    }
    myInnerArrowFunction( true );
};

myOuterFunction( false );
> true

let myArrowFunction = ( ...myParams ) => {
    console.log( myParams[ 0 ] );
};

myArrowFunction( true );
> true`
``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       â€¢â€¢â€¢Expressionsâ€¢â€¢â€¢
1. A named expression is excellent for Debugging.


ðŸ”¹ðŸ”¹Example1-Debug:

const myVariable = function myFunction() {
    console.log( "One second elapsed." );
    setTimeout( myFunction, 1000 );
};

setTimeout( myVariable, 1000 );
> "One second elapsed."
> "One second elapsed."
> "One second elapsed."
â€¦



2. Arrow functions can also be used with these expressions.


ðŸ”¹ðŸ”¹Example2-Arrows:

const myFunction = () => {};





3. If we are using only One Param, we can leave the () out.

ðŸ”¹ðŸ”¹Example3-No()

const myFunction = myParameter => {};





4. To declare the function inside a body while receiving a result, both the enclosing curly braces && the return keyword are required.


ðŸ”¹ðŸ”¹Example4-Return:

const myFunction = () => 2 + 2

myFunction()
> 4





5. Arrow functions provide the nearest enclosing function which provides both values.


ðŸ”¹ðŸ”¹Example5-Arrow:

function myParentFunction() {
    this.myProperty = true;
    let myFunction = () => {
            console.log( this );
    }
    myFunction();
};

let myInstance = new myParentFunction();
> Object { myProperty: true }





6. Calling the arrow functions.

ðŸ”¹ðŸ”¹Example6-Calling:

function myFunction() {
    let myArrowFunction = () => {
            console.log( arguments[ 0 ] );
    }
    myArrowFunction( true );
};

myFunction( false );
> false




7. IIFE is a function expression that is called immediately.

ðŸ”¹ðŸ”¹Example7-IIFE:

(function() {
    console.log( "IIFE.")
    }
)();
> "IIFE."

(function() {
    console.log( "IIFE.")
    }
());
> "IIFE."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            â€¢â€¢â€¢Newâ€¢â€¢â€¢
1. When we call or create a function with the "new" keyword, this creates a new object.

ðŸ”¹ðŸ”¹Example1-New:

function MyFunction() {}
const myObject = new MyFunction();

typeof myObject;
> "object"`





2. This allows the use of the constructor function.

ðŸ”¹ðŸ”¹Example2-Const:

function MyFunction() {
  this.myProperty = true;
}
const myObject = new MyFunction();

myObject.myProperty;
> true



3. When using "this" this refers to the nearest function.

ðŸ”¹ðŸ”¹Example3-This:

function MyFunction( myArgument ) {
    this.myValue = myArgument;
    this.doubleMyValue = () => myArgument * 2;
}
const myObject = new MyFunction( 10 );

myObject.myValue;
> 10

myObject.doubleMyValue();
> 20





4. In this example we will be using both this && a global binding.

ðŸ”¹ðŸ”¹Example4-ThisBinding:

function MyFunction() {
    console.log( this  );
}
const myObject = new MyFunction();
> MyFunction { }

MyFunction(); // Global `this` binding outside of strict mode is `globalThis`
> Window { â€¦ }

(function() {
    "use strict";
    function MyFunction() {
            console.log( this );
    }
    MyFunction();  // Global `this` binding inside of strict mode is `undefined`
}());
> undefined





5. Adding in arguments.

ðŸ”¹ðŸ”¹Example5-Args:

function myFunction( myArgument = false ) {
  return { "myProperty" : myArgument };
}
const myObject = myFunction( true );

myObject;
> Object { myProperty: true }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           â€¢â€¢â€¢Returnâ€¢â€¢â€¢
1. Return is basically self-explanatory. Return, returns.

ðŸ”¹ðŸ”¹Example1-Return:

const myFunction = function() {
   return 3 === 3;
}

myFunction();
> 3





2. Anything that is returned, is considered Data.

ðŸ”¹ðŸ”¹Example2-Data:

const myFunction = function() {
   return 4 + 4;
}

myFunction() + myFunction();
> 16





3. Anything after the "return" is Not Executed!

ðŸ”¹ðŸ”¹Example3-Return:

const myFunction = function() {
   return true;
   console.log( "This is a string." );
}

myFunction();
> true




4. In this example, we are returning strings. If one is not called, it will not return, while the others will.

ðŸ”¹ðŸ”¹Example4-ReturnStrings:

function myFunction( myString ) {
   if( typeof myString !== "string" ) {
    return false;
   }
   if( myString.length >= 5 ) {
    return true;
   } else {
    return false;
   }
}

myFunction( 100 );
> false

myFunction( "St" );
> false

myFunction( "String." );
> true






5. Arrow functions can also be returned.

ðŸ”¹ðŸ”¹Example5-Arrows:

const myFunction = () => 2 + 2;

myFunction();
> 4





6. A block syntax will explicitly return.


ðŸ”¹ðŸ”¹Example6-ExplicitReturn:

const myFunction = () => { 2 + 2 };

myFunction();
> undefined
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          â€¢â€¢â€¢Thisâ€¢â€¢â€¢
1. Used to specify the nearest function. The function "this" is binded to. 


2. Here is a example of Global Binding. In this, "Window" is the global Object.

ðŸ”¹ðŸ”¹Example2-Window:

this;
> Window {0: Window, window: Window, self: Window, document: document, name: '', location: Location, ...}


ðŸ”¹ðŸ”¹Example3-NodejS:

$ node
Welcome to Node.js v20.10.0.
Type ".help" for more information.
> this
<ref *1> Object [global] {
...
}




3. Outside of a function, this can also refer to the inside function.


ðŸ”¹ðŸ”¹Example4-StandAlone:

function myFunction() {
    console.log( this );
}
myFunction();
> Window {...}

(function() {
    console.log( this );
}());
> Window {...}



ðŸ”¹ðŸ”¹Example5-StrictMode:

(function() {
    "use strict";
    console.log( this );
}());
> undefined



4. When using this inside of a method, it will refer to the object that contains this method.

ðŸ”¹ðŸ”¹Example6-Object:

let myObject = {
    myValue: "This is my string.",
    myMethod() {
            console.log( this.myValue );
    }
};

myObject.myMethod();
> "This is my string."






5. In arrow functions "this" will resolve to the binding.

ðŸ”¹ðŸ”¹Example7-Arrow&This:

let myObject = {
    myMethod() { console.log( this ); },
    myArrowFunction: () => console.log( this ),
    myEnclosingMethod: function () {
        this.myArrowFunction = () => { console.log(this) };
    }
};

myObject.myMethod();
> Object { myMethod: myMethod(), myArrowFunction: myArrowFunction() }

myObject.myArrowFunction();
> Window {...}





ðŸ”¹ðŸ”¹Example8-EnclosingMethod:

let myObject = {
    myMethod() { console.log( this ); },
    myEnclosingMethod: function () {
        this.myArrowFunction = () => { console.log(this) };
    }
};

myObject.myEnclosingMethod();
myObject.myArrowFunction();
> Object { myMethod: myMethod(), myArrowFunction: myArrowFunction() }




ðŸ”¹ðŸ”¹Example9-TimeOut:

var myObject = {
  myString: "This is my string.",
  myMethod() {
    console.log( this.myString );
  }
};
myObject.myMethod();
> "This is my string."

setTimeout( myObject.myMethod, 100 );
> undefined





6. call()
bind()
apply()
fetch()





7. Explicitly Binding overrides "this".


ðŸ”¹ðŸ”¹Example-OverRiding:

let myObject = {
    "myValue" : "This string sits alongside myMethod.",
    myMethod() {
        console.log( this.myValue );
    }
};
let myOtherObject = {
    "myValue" : "This is a string in another object entirely.",
};

myObject.myMethod.call( myOtherObject );
> "This is a string in another object entirely."




8. Here is a example of this and class. We will create a New Class.

ðŸ”¹ðŸ”¹Example-Class:

class MyClass {
    myString;
    constructor() {
        this.myString = "My string.";
    }
    logThis() {
        console.log( this );
    }
}
const thisClass = new MyClass();

thisClass.logThis();
> Object { myString: "My string." }




ðŸ”¹ðŸ”¹Example-This&&New:

function MyFunction() {
  this.myString = "My string.";
  this.logThis = function() {
    console.log( this );
  }
}
const myObject = new MyFunction();

myObject.logThis();
> Object { myString: "My string.", logThis: logThis() }





9. With event handlers, this refers to the invoking object.

ðŸ”¹ðŸ”¹Example-Event:

let button = document.querySelector( "button" );

button.addEventListener( "click", function( event ) { console.log( this ); } );





ðŸ”¹ðŸ”¹Example-Callback:

let button = document.querySelector( "button" );

button.addEventListener( "click", ( event ) => { console.log( this ); } );
> undefined


10. call()
bind()
apply()
eval()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
ðŸ‘‹ First we would like to Thank You for any and all Donations for our Work and Research. This is for general use, designed as a Cheat-Guide for Google Developers. This is Not For Publication. If you wish to learn at a full level, please consult Google && Web.Dev.