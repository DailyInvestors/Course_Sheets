References:   "Gemini"

"https://web.dev"

ðŸš¨ All of these teachings are based off the Google Web.Dev Page. However, I am being constantly attacked on this Page, seeing DOS attacks. My suggestion LinkedIn Learning over anything Google. Why?? For your Protection.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           â€¢â€¢â€¢Arraysâ€¢â€¢â€¢
1. To create a Array in jS, remember we must use [].

ðŸ”¹ðŸ”¹Example1-Create:
const myArray = [];


ðŸ”¹ðŸ”¹Example2-New:
const myArray = new Array();


ðŸ”¹ðŸ”¹Example3-String:
const myArray = [ true, null, "String", false ];

myArray;
> [ true, null, "String", false ]

2. Array literals inherit their properties && methods from the corresponding constructor.

ðŸ”¹ðŸ”¹Example2-ArrayLiteral:
const arrayLiteral = [];
const arrayConstructor = new Array();

typeof arrayLiteral;
> "object"

arrayLiteral;
> Array []
    length: 0
    <prototype>: Array []

typeof arrayConstructor;
> "object"

arrayConstructor;
> Array []
    length: 0
    <prototype>: Array []
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        â€¢â€¢â€¢Sparse Arraysâ€¢â€¢â€¢

1. A sparse array is an array in which most of the elements have the same value (typically zero), meaning that only a small number of elements hold meaningful data.

ðŸ”¹ðŸ”¹Example1-SparseArray:
Consider a 10x10 array representing a game board, where most cells are empty (represented by 0) and only a few contain game pieces (represented by other numbers).
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0

In this example, only two elements (the '1' and the '2') are non-zero, while the rest are zero. Storing all 100 elements would be inefficient if most are empty. Sparse array data structures (like hash maps or linked lists of non-zero elements) are used to store only the non-zero values and their positions, saving memory and processing time.


ðŸ”¹ðŸ”¹Example2-EmptySlot:
const myArray = [ 1,, 3, 4 ];

myArray.length;
> 4

for( const myValue of myArray ) {
  console.log( myValue + 10 );
}
> 11
> NaN
> 13
> 14
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     â€¢â€¢â€¢Accessing Arraysâ€¢â€¢â€¢

ðŸ”¹ðŸ”¹Example1:
// 1. Declaring an array
const fruits = ["Apple", "Banana", "Cherry", "Date", "Elderberry"];
const numbers = [10, 20, 30, 40, 50];
const mixedData = ["Hello", 123, true, null, { key: "value" }];

console.log("--- Accessing elements from the 'fruits' array ---");

// 2. Accessing elements using index (0-based)
console.log("First fruit:", fruits[0]);    // Output: Apple
console.log("Second fruit:", fruits[1]);   // Output: Banana
console.log("Third fruit:", fruits[2]);    // Output: Cherry

// 3. Accessing the last element
console.log("Last fruit:", fruits[fruits.length - 1]); // Output: Elderberry

console.log("\n--- Accessing elements from the 'numbers' array ---");

// 4. Accessing elements from 'numbers' array
console.log("First number:", numbers[0]);  // Output: 10
console.log("Fourth number:", numbers[3]); // Output: 40

console.log("\n--- Accessing elements from the 'mixedData' array ---");

// 5. Accessing elements from 'mixedData' array
console.log("First element (string):", mixedData[0]);      // Output: Hello
console.log("Second element (number):", mixedData[1]);     // Output: 123
console.log("Third element (boolean):", mixedData[2]);     // Output: true
console.log("Fifth element (object):", mixedData[4]);      // Output: { key: 'value' }
console.log("Accessing a property of the object in the array:", mixedData[4].key); // Output: value

// 6. What happens if you try to access an index out of bounds?
console.log("\n--- Out of Bounds Access ---");
console.log("Trying to access index 10 in 'fruits':", fruits[10]); // Output: undefined
console.log("Trying to access negative index:", fruits[-1]); // Output: undefined (JavaScript doesn't support negative indexing directly for arrays)

// 7. Using a loop to access all elements
console.log("\n--- Using a loop to access all fruits ---");
for (let i = 0; i < fruits.length; i++) {
  console.log(`Fruit at index ${i}: ${fruits[i]}`);
}

console.log("\n--- Using forEach to access all numbers ---");
numbers.forEach(function(number, index) {
  console.log(`Number at index ${index}: ${number}`);
});

console.log("\n--- Using for...of loop to access all mixedData elements ---");
let index = 0;
for (const item of mixedData) {
  console.log(`Element at index ${index}: ${item}`);
  index++;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  â€¢â€¢â€¢Destructing Assignmentsâ€¢â€¢â€¢

1. "Binding Pattern Destruction" occurs when each value is unpacked from the array or object. Then is  assigned to the corresponding variable. 


2. We can use both curly braces ({}) to destructure an object. Then we can use square brackets ([]) to destructure the arrays.

ðŸ”¹ðŸ”¹Example1:

const myArray = [ "A string", "A second string" ];
const [ myFirstElement, mySecondElement ] = myArray;

const myObject = { firstValue: false, secondValue: true };
const { myProp, mySecondProp } = myObject;

myFirstElement;
> "My string"

mySecondElement;
> "Second string"

myProp;
> false

mySecondProp;
> true



ðŸ”¹ðŸ”¹Example2-DestructingArrays:
// 1. Basic Array Destructuring
console.log("--- Basic Array Destructuring ---");
const colors = ["red", "green", "blue", "yellow"];

// Destructure the first three elements into distinct variables
const [firstColor, secondColor, thirdColor] = colors;

console.log(firstColor);  // Output: red
console.log(secondColor); // Output: green
console.log(thirdColor);  // Output: blue

// 2. Skipping Elements
console.log("\n--- Skipping Elements ---");
const fruits = ["apple", "banana", "cherry", "date"];

// Skip the second element by leaving an empty space
const [fruit1, , fruit3] = fruits;

console.log(fruit1); // Output: apple
console.log(fruit3); // Output: cherry

// 3. Rest Parameter (Gathering Remaining Elements)
console.log("\n--- Rest Parameter ---");
const numbers = [10, 20, 30, 40, 50, 60];

// Get the first two numbers and put the rest into a new array
const [num1, num2, ...remainingNumbers] = numbers;

console.log(num1);            // Output: 10
console.log(num2);            // Output: 20
console.log(remainingNumbers); // Output: [30, 40, 50, 60]

// 4. Default Values
console.log("\n--- Default Values ---");
const developers = ["Alice", "Bob"];

// If an element is undefined in the array, a default value can be used
const [dev1, dev2, dev3 = "Charlie"] = developers;

console.log(dev1); // Output: Alice
console.log(dev2); // Output: Bob
console.log(dev3); // Output: Charlie (because developers[2] is undefined)

const emptyArray = [];
const [a = 1, b = 2] = emptyArray;
console.log(a); // Output: 1
console.log(b); // Output: 2

// 5. Swapping Variables (without a temporary variable)
console.log("\n--- Swapping Variables ---");
let x = 5;
let y = 10;

console.log(`Before swap: x = ${x}, y = ${y}`); // Output: Before swap: x = 5, y = 10

[x, y] = [y, x]; // Swap them!

console.log(`After swap: x = ${x}, y = ${y}`);  // Output: After swap: x = 10, y = 5

// 6. Destructuring with Functions (returning an array)
console.log("\n--- Destructuring with Functions ---");

function getUserInfo() {
  return ["John Doe", 30, "Software Engineer"];
}

const [name, age, occupation] = getUserInfo();

console.log(`Name: ${name}, Age: ${age}, Occupation: ${occupation}`);
// Output: Name: John Doe, Age: 30, Occupation: Software Engineer

// 7. Nested Array Destructuring (less common but possible)
console.log("\n--- Nested Array Destructuring ---");
const coordinates = [10, [20, 30], 40];

const [coord1, [nestedCoord1, nestedCoord2], coord3] = coordinates;

console.log(coord1);      // Output: 10
console.log(nestedCoord1); // Output: 20
console.log(nestedCoord2); // Output: 30
console.log(coord3);      // Output: 40
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. In this example we demonstrate the difference in using [] for objects && {} for arrays.

2. When we destruct an array, the format consists of a sequential order. Which is left to right.

ðŸ”¹ðŸ”¹Example2-[}
const myArray = [ false, true ];
const myObject = { firstValue: false, secondValue: true };

const [ myProp, mySecondProp ] = myObject;
> Uncaught TypeError: myObject is not iterable

const { myElement, mySecondElement } = myArray;

myElement
> undefined

mySecondElement;
> undefined




ðŸ”¹ðŸ”¹Example3-Order:

const myArray = [ 1, 2, 3 ];
const [ myElement, mySecondElement, myThirdElement ] = myArray;

myElement;
> 1

mySecondElement;
> 2

myThirdElement;
> 3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       â€¢â€¢â€¢Spread Arrayâ€¢â€¢â€¢
1. The Spread Syntax was designed to copy and combine arrays.

ðŸ”¹ðŸ”¹Example1-Spread:

const myArray = [ 1, 2, 3 ];
const spreadArray = [ ...myArray ];

spreadArray;
> Array(3) [ 1, 2, 3 ]




2. In this example we will be merging an array.

ðŸ”¹ðŸ”¹Example2-Merge:
const myArray = [ 1, 2, 3 ];
const mySecondArray = [ 4, 5, 6 ];
const myNewArray = [ ...myArray, ...mySecondArray ];

myNewArray;
> Array(6) [ 1, 2, 3, 4, 5, 6 ]




3. In this example we will be passing the elements.

ðŸ”¹ðŸ”¹Example3-Passing:

const myArray = [ true, false ];
const myFunction = ( myArgument, mySecondArgument ) => {
    console.log( myArgument, mySecondArgument );
};

myFunction( ...myArray );
> true false



4. The Spread array also will work with a "Object Literal".

ðŸ”¹ðŸ”¹Example4-Duplicate:
const myObj = { myProperty : true };
const mySecondObj = { ...myObj };

mySecondObj;
> Object { myProperty: true }


ðŸ”¹ðŸ”¹Example5-Merge:
const myFirstObj = { myProperty : true };
const mySecondObj = { additionalProperty : true };
const myMergedObj = { ...myFirstObj, ...mySecondObj };

myMergedObj;
> Object { myProperty: true, additionalProperty: true }




ðŸ”¹ðŸ”¹Example6-ShadowCopies:

const myCustomPrototype = { protoProp: "My prototype." };
const myObj = Object.create( myCustomPrototype, {
    myEnumerableProp: {
        value: true,
        enumerable: true
    },
    myNonEnumerableProp: {
        value: false,
        enumerable: false
    }
});
const myNewObj = { ...myObj };

myObj;
> Object { myEnumerableProp: true, â€¦ }
    myEnumerableProp: true
    myNonEnumerableProp: false
    <prototype>: Object { protoProp: "My prototype." }

myNewObj;
> Object { myEnumerableProp: true }
    myEnumerableProp: true
    <prototype>: Object { â€¦ }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       â€¢â€¢â€¢Rest Operatorâ€¢â€¢â€¢
1. The rest is basically just the format of the output. How it is designed.

ðŸ”¹ðŸ”¹Example1-Syntax:
const myArray = [ "First", "Second", "Third", "Fourth", "Fifth" ];

[ myFirstElement, mySecondElement, ...remainingElements ] = myArray;

myFirstElement;
> "First"

mySecondElement;
> "Second"

remainingElements;
> Array(3) [ "Third", "Fourth", "Fifth"]



2. When there are a indefinite amount of arguments it is called a Rest Parameter. We can also use Bash to convert anything into this or out.

ðŸ”¹ðŸ”¹Example2-Param:
function myFunction( ...myParameters ) {
    let result = 0;
    myParameters.forEach( ( myParam ) => {
        result += myParam;
    });
    return result;
};

myFunction( 2, 2 );
> 4

myFunction( 1, 1, 1, 10, 5 );
> 18

myFunction( 10, 11, 25 );
> 46
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        â€¢â€¢â€¢%TypedArray%â€¢â€¢â€¢
1. Designed for Binary Data.

2. Typed Arrays in JavaScript are a powerful feature for working with binary data. Unlike regular JavaScript arrays, which can hold elements of any data type and resize dynamically.

3. Typed Arrays are designed for efficiency when dealing with fixed-size, numerical data. They offer a "view" into an underlying raw binary data buffer.


The Core Concepts:
 â€¢â€¢ ArrayBuffer: This is the lowest-level component. It represents a raw, generic fixed-length binary data buffer. You can't directly manipulate its contents. Think of it as a block of memory.
 
â€¢â€¢ TypedArray Views: These are "views" into an ArrayBuffer. They provide methods to read and write data to the ArrayBuffer in a specific format (e.g., as 8-bit integers, 32-bit floating-point numbers, etc.).
  
 â€¢â€¢ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array: For signed and unsigned integers of various bit sizes.
 
  â€¢â€¢ Float32Array, Float64Array: For single and double-precision floating-point numbers.
 
  â€¢â€¢ BigInt64Array, BigUint64Array: For 64-bit integers.
 
  â€¢â€¢ Uint8ClampedArray: Similar to Uint8Array, but values are "clamped" (rounded) to the nearest 0-255 range, often used for image data.

 â€¢â€¢ DataView: While Typed Arrays provide a view of uniformly typed data, DataView allows you to read and write different types of data at arbitrary byte offsets within an ArrayBuffer. It's useful when you have mixed data types in your binary buffer.

Why Use Typed Arrays?
 â€¢â€¢ Performance: More efficient for numerical computations and binary data manipulation compared to regular arrays.
 
â€¢â€¢ Memory Efficiency: They use a fixed amount of memory per element, without the overhead of storing type information for each element.

 â€¢â€¢ Interoperability: Crucial for working with APIs that deal with raw binary data, such as:
   â€¢ WebSockets (for sending/receiving binary messages)
   â€¢ Web Audio API
   â€¢ WebGL (for graphics)
   â€¢ File API (reading binary files)
   â€¢ WebAssembly (Wasm)


ðŸ”¹ðŸ”¹Exanple1-TypedArrays:

// --- Section 1: Understanding ArrayBuffer ---

console.log("--- Section 1: Understanding ArrayBuffer ---");

// 1. Create an ArrayBuffer: This is a raw, fixed-size binary data buffer.
//    It allocates 16 bytes of memory. Initially, all bytes are 0.
const buffer = new ArrayBuffer(16);
console.log(`Buffer byteLength: ${buffer.byteLength} bytes`); // Output: Buffer byteLength: 16 bytes

// You cannot directly interact with the ArrayBuffer's contents.
// console.log(buffer[0]); // This would be undefined, as buffer is not an array.


// --- Section 2: Creating Typed Array Views ---

console.log("\n--- Section 2: Creating Typed Array Views ---");

// 2. Create Typed Array Views to interpret the buffer's data.

// a) Uint8Array: A view that interprets the buffer as a sequence of 8-bit unsigned integers (0-255)
//    Each element takes 1 byte. Since the buffer is 16 bytes, this array will have 16 elements.
const uint8View = new Uint8Array(buffer);
console.log(`Uint8Array length: ${uint8View.length}`); // Output: Uint8Array length: 16
console.log(`Uint8Array initial values:`, uint8View); // Output: Uint8Array initial values: Uint8Array(16) [0, 0, 0, 0, ..., 0]

// Assign values to the Uint8Array
uint8View[0] = 255;
uint8View[1] = 128;
uint8View[2] = 10;
// Values outside the range (0-255) will wrap around or clamp.
uint8View[3] = 256; // 256 becomes 0 (256 % 256 = 0)
uint8View[4] = -1;  // -1 becomes 255 (wraps around)

console.log(`Uint8Array after assignments:`, uint8View);
// Output: Uint8Array after assignments: Uint8Array(16) [255, 128, 10, 0, 255, 0, 0, 0, ..., 0]


// b) Int16Array: A view that interprets the buffer as a sequence of 16-bit signed integers (-32768 to 32767)
//    Each element takes 2 bytes. Since the buffer is 16 bytes, this array will have 8 elements (16 / 2).
const int16View = new Int16Array(buffer);
console.log(`Int16Array length: ${int16View.length}`); // Output: Int16Array length: 8
console.log(`Int16Array initial values (reflecting changes from uint8View):`, int16View);
// Notice how changes in uint8View affect int16View because they share the same underlying buffer.
// int16View[0] will be a 16-bit interpretation of uint8View[0] and uint8View[1]
// (255 (0xFF) + 128 (0x80) * 256 = 0x80FF = 33023 if little-endian)
// The exact value depends on the system's endianness.

// Assign values to the Int16Array
int16View[0] = -100;
int16View[1] = 5000;
int16View[2] = 32767; // Max for Int16
int16View[3] = 32768; // Will overflow and become -32768

console.log(`Int16Array after assignments:`, int16View);
// Output will show how values are interpreted as 16-bit signed integers.
// E.g., Int16Array(8) [-100, 5000, 32767, -32768, 0, 0, 0, 0]

// See how the original Uint8Array is affected by Int16Array changes
console.log(`Uint8Array after Int16Array assignments:`, uint8View);
// Values in uint8View will reflect the byte-level changes made by int16View.
// E.g., if int16View[0] is -100 (0xFF9C), then uint8View[0] might be 156 (0x9C) and uint8View[1] might be 255 (0xFF).


// c) Float32Array: A view for 32-bit floating-point numbers.
//    Each element takes 4 bytes. 16 bytes buffer / 4 bytes/element = 4 elements.
const float32View = new Float32Array(buffer);
console.log(`Float32Array length: ${float32View.length}`); // Output: Float32Array length: 4
float32View[0] = 3.14;
float32View[1] = -0.5;
console.log(`Float32Array:`, float32View);


// --- Section 3: Creating Typed Arrays Directly (with implicit ArrayBuffer) ---

console.log("\n--- Section 3: Creating Typed Arrays Directly ---");

// You can create a typed array directly, and it will implicitly create its own ArrayBuffer.
const dataScores = new Uint8Array(5); // Creates a buffer of 5 bytes
dataScores[0] = 90;
dataScores[1] = 85;
dataScores[2] = 92;
console.log(`dataScores:`, dataScores); // Output: Uint8Array(5) [90, 85, 92, 0, 0]
console.log(`dataScores' underlying buffer byteLength: ${dataScores.buffer.byteLength}`); // Output: 5 bytes

const temperatures = new Float64Array([25.5, 28.1, 22.0]); // Creates a buffer sufficient for 3 Float64s
console.log(`temperatures:`, temperatures); // Output: Float64Array(3) [25.5, 28.1, 22]
console.log(`temperatures' underlying buffer byteLength: ${temperatures.buffer.byteLength}`); // Output: 24 bytes (3 * 8 bytes/Float64)


// --- Section 4: DataView for Mixed Data Types ---

console.log("\n--- Section 4: DataView for Mixed Data Types ---");

// DataView allows fine-grained control over byte offsets and different data types.
// Useful when you have a structured binary message/file format.

const dataBuffer = new ArrayBuffer(8); // 8 bytes for various data
const dataView = new DataView(dataBuffer);

// Write an 8-bit unsigned integer at byte offset 0
dataView.setUint8(0, 123);

// Write a 16-bit signed integer at byte offset 1 (skipping 1 byte)
// The `true` argument indicates little-endian byte order (optional, default is big-endian)
dataView.setInt16(1, -500, true);

// Write a 32-bit floating-point number at byte offset 4
dataView.setFloat32(4, 99.9);

console.log("DataView after writing values:");
console.log(`Byte at offset 0 (Uint8): ${dataView.getUint8(0)}`);     // Output: 123
console.log(`Bytes at offset 1 (Int16, little-endian): ${dataView.getInt16(1, true)}`); // Output: -500
console.log(`Bytes at offset 4 (Float32): ${dataView.getFloat32(4)}`); // Output: 99.9

// You can also create a typed array view from a DataView's buffer to see its raw bytes:
const rawBytes = new Uint8Array(dataBuffer);
console.log(`Raw bytes in dataBuffer:`, rawBytes);
// Output will be something like: Uint8Array(8) [123, 164, 254, 0, 205, 204, 172, 65]
// (The exact values depend on how -500 and 99.9 are represented in binary)

// --- Section 5: Practical Use Case (Simulated Network Packet) ---

console.log("\n--- Section 5: Practical Use Case (Simulated Network Packet) ---");

// Imagine receiving a binary network packet:
// Byte 0: Packet Type (Uint8)
// Bytes 1-2: Data Length (Uint16)
// Bytes 3-6: Checksum (Uint32)

const packetBuffer = new ArrayBuffer(7); // Total 7 bytes
const packetView = new DataView(packetBuffer);

// Simulate writing a packet
packetView.setUint8(0, 1); // Packet Type: 1 (e.g., 'data')
packetView.setUint16(1, 1024, true); // Data Length: 1024 bytes (little-endian)
packetView.setUint32(3, 0xABCDEF01); // Checksum (big-endian by default)

console.log("Simulated Network Packet:");
console.log(`Packet Type: ${packetView.getUint8(0)}`);
console.log(`Data Length: ${packetView.getUint16(1, true)}`); // Read with little-endian
console.log(`Checksum: 0x${packetView.getUint32(3).toString(16).toUpperCase()}`);

const packetRawBytes = new Uint8Array(packetBuffer);
console.log("Packet Raw Bytes:", packetRawBytes);
// Output will show the byte representation of the packet.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


