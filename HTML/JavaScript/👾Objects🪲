         •••Objects•••

🚨 References: 👾Gemini👾

"https://web.dev/"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. A Object is mutable.

2. A Object is a form of data.

3. All values are Objects.

🔹🔹Example1-ObjectLiteral:

{
    "myProperty" : true
}




4. Keys can be both Symbols && Strings:

🔹🔹Example-Keys:

let carAttributes = {
    "color" : "red"
};

carAttributes
> Object { color: "red" }




5. A property value can be any type of data.

🔹🔹Example-Data:

let myObject = {
    'key' : {
        'subkey' : true,
        'othersubkey' : false
    }
};

myObject;
> Object { key: Object { subkey: true, othersubkey: false } }



6. When the value is also the property, this is called a method().

🔹🔹Example-Method:

const myObject = {
    "myProperty" : true,
    myMethod() {
        console.log( "This is a method." );
    }
}

myObject.myProperty;
> true

myObject.myMethod();
> "This is a method."





7. We can use "new" to create new objects().

🔹🔹Example-New:

let myObject = new Object();




8. The "new" must define a empty object.

🔹🔹Example-NewObject:

let myObject = new Object();

myObject.booleanValue = true;
myObject.stringValue = "My string.";





9.  With a "Object Literal" we can define the Objects/Data.

🔹🔹Example-ObjectLiteral:

let myObject = {
    'booleanValue' : true,
    'stringValue' : "My string."
};





10.  When passing a "Object Literal" with "newObject" this passes the Argument without changing anything.

🔹🔹Example-Passing:

let myObject = new Object( { myValue : 10 } );

myObject;
> Object { myValue: 10 }


11. The correct Syntax for getting the value of myProp.

🔹🔹Example-myProp:

myObj["myProp"];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        •••Accessors•••

1.  A "Dot Notation" is the . or period between Objects.

2. A "Dot Notation" can be used to edit, call, and create.

🔹🔹Example-Dot:

const myObj = {};

myObj.myProp = "String value.";

myObj;
> Object { myProp: "String value." }



3. When changing a Object using the "Dot Notation". This allows us to access the Objects properties.

🔹🔹Example-Properties:

const myObj = {
    "myProp": {
            "childProp" : true
    }
};

myObj.myProp.childProp;
> true;



4. Optional Chaining Character (?.)

🔹🔹Example-?.:

const myObj = {
    "myProp": {
            "childProp" : true
    }
};

myObj.myMissingProp?.childProp;
> undefined




🔹🔹Example-BracketNotation:

const myObj = {
    "myProp": "String value."
};

myObj["myProp"];
> "String value."




🔹🔹Example-FalseFetching:

const myObj = {
    "false": 25,
    "10" : true,
    "key with spaces": true
};

myObj[false];
> 25

myObj[10];
> true

myObj["key with spaces"];
> true



🔹🔹Example-RandomNumber:

const colors = {
    "color1" : "red",
    "color2" : "blue",
    "color3" : "green"
};
const randomNumber = Math.ceil( Math.random() * 3 );

colors[ "color" + randomNumber ];
> "blue"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        •••Inheritance•••
1. When a Object inherits, this value comes from the built-in Object.

🔹🔹Example-Inherit:

let myObject = {
    'booleanValue' : true
};

myObject;
> Object { booleanValue: true }
    booleanValue: true
    [[prototype]]: Object { … }
            __defineGetter__: function __defineGetter__()
            __defineSetter__: function __defineSetter__()
            __lookupGetter__: function __lookupGetter__()
            __lookupSetter__: function __lookupSetter__()
            __proto__: …
                constructor: function Object()
                hasOwnProperty: function hasOwnProperty()
                isPrototypeOf: function isPrototypeOf()
                propertyIsEnumerable: function propertyIsEnumerable()
                toLocaleString: function toLocaleString()
                toString: function toString()
                valueOf: function valueOf()
                <get __proto__()>: function __proto__()
                <set __proto__()>: function __proto__()



2. Here is a example for Chrome newObject().

🔹🔹Example-Chrome:

// Chrome:
let emptyObject = {};

emptyObject;
> {}
  [[prototype]]: Object



3. Here is a example for Firefox to create a newObject().

🔹🔹Example-Firfox:

// Firefox:
let emptyObject = {};

emptyObject;
> Object {  }
  <prototype>: Object { … }




4. Most Browsers allow __proto__, but this is not a Standard.

🔹🔹Example-__proto__:

let emptyObject = {};

emptyObject.__proto__;
> Object { … }
    __defineGetter__: function __defineGetter__()
    __defineSetter__: function __defineSetter__()
    __lookupGetter__: function __lookupGetter__()
    __lookupSetter__: function __lookupSetter__()
    __proto__:
        constructor: function Object()
        hasOwnProperty: function hasOwnProperty()
        isPrototypeOf: function isPrototypeOf()
        propertyIsEnumerable: function propertyIsEnumerable()
        toLocaleString: function toLocaleString()
        toString: function toString()
        valueOf: function valueOf()
        <get __proto__()>: function __proto__()
        <set __proto__()>: function __proto__()




5. However these methods are a better choice: the [[Prototype]] of an object using the built-in methods.
Object.getPrototypeOf(
Object.setPrototypeOf()


🔹🔹Example-Methods:

let myObj = { "value" : 5 };
let protoParent = { "protoValue" : true };

myObj;
Object { value: 5 }
    value: 5
    <prototype>: Object { … }

Object.getPrototypeOf( myObj );
> Object { … }
    __defineGetter__: function __defineGetter__()
    __defineSetter__: function __defineSetter__()
    __lookupGetter__: function __lookupGetter__()
    __lookupSetter__: function __lookupSetter__()
    __proto__:
    constructor: function Object()
    hasOwnProperty: function hasOwnProperty()
    isPrototypeOf: function isPrototypeOf()
    propertyIsEnumerable: function propertyIsEnumerable()
    toLocaleString: function toLocaleString()
    toString: function toString()
    valueOf: function valueOf()
    <get __proto__()>: function __proto__()
    <set __proto__()>: function __proto__()

Object.setPrototypeOf( myObj, protoParent );
> Object { value: 5 }
    value: 5
    <prototype>: Object { protoValue: true }




6. Here we are using the built-in method called hasOwn(). The value returns True, while holding built-in calling methods.

🔹🔹Example-HasOwn:

let myObject = {
    'myValue' : 100
};

Object.hasOwn( myObject, 'myValue' );
> true

myObject.__proto__; // The Object prototype inherited by `myObject` is present:
> Object { … }

Object.hasOwn( myObject, '__proto__' ); // The Object prototype inherited by `myObject` is not an "own property:"
> false
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         •••Descriptors•••

1. There are two types of descriptors {data descriptors and accessor descriptors}


2. Accessor Descriptors {


[[Value]]	Data	undefined	Contains a property's value.

[[Writable]]	Data	false	Determines whether you can change the property's value.

[[Get]]	Accessor	undefined	The property's getter function, which executes when the property is accessed.

[[Set]]	Accessor	undefined	The property's setter function, which executes when the property is set or changed.

[[Configurable]]	Both	false	If this is false, the property can't be deleted and its attributes can't be changed. If this is false and 

[[Writable]] is true, the property's value can still be changed.

[[Enumerable]]	Both	false	If this is true, you can iterate over the property using for...in loops or the Object.keys() static method.
}


3. We can use the Object.defineProperty() static method to edit the properties of each object.

🔹🔹Example-DefineProp:

const myObj = {};

Object.defineProperty(myObj, 'myProperty', {
  value: true,
  writable: false
});

myObj.myProperty;
> true

myObj.myProperty = false;

myObj.myProperty;
> true




4. When we use Object.create(), this allows us, to inherit properties from the built-in functions.

🔹🔹Example-Object.Create():

const myCustomPrototype = {
  'myInheritedProp': 10
};

const newObject = Object.create( myCustomPrototype );

newObject;
> Object {  }
<prototype>: Object { myInheritedProp: 10 }
  myInheritedProp: 10
  <prototype>: Object { … }



5. When using object.create() we can take on a second argument. By this we will have to use the default object.defineProperty() method.

🔹🔹Example-2ndArgument:

const myCustomPrototype = {
  'myInheritedProp': 10
};

const myObj = Object.create( myCustomPrototype, {
        myProperty: {
            value: "The new property value.",
            writable: true,
            configurable: true
        }
  });

myObj;
> Object { … }
    myProperty: "The new property value."
    <prototype>: Object { myInheritedProp: 10 }




6. Here is a example of a Chain Prototype. 

🔹🔹Example-Chain:

const myPrototype = {
  'protoProp': 10
};

const newObject = Object.setPrototypeOf( { 'objProp' : true }, myPrototype );

newObject;
> Object { objProp: true }
    objProp: true
    <prototype>: Object { protoProp: 10 }
        protoProp: 10
        <prototype>: Object { … }




7. We can call them while being at the Top Level 🎚️.

🔹🔹Example-TopLevel:

const objectLiteral = {
    "value" : true
};

objectLiteral;
> Object { value: true }
    value: true
    <prototype>: Object { … }

objectLiteral.toString();
"[object Object]"



🔹🔹Example2-TopLevel:

const myCustomPrototype = {
  'protoProp': "Prototype property value."
};

const myObj = Object.create( myCustomPrototype, {
    myProperty: {
        value: "Top-level property value.",
        writable: true,
        configurable: true
    }
});

myObj.protoProp;
> "Prototype property value."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
🔹🔹Example-TopLevelwithDocCook:

// 1. Define a custom prototype that will hold a method to interact with cookies.
const cookiePrototype = {
  getCookie: function() {
    // Access document.cookie directly from the global scope.
    // This method demonstrates accessing a global property (document)
    // and then its property (cookie).
    return document.cookie;
  },
  setCookie: function(name, value, days) {
    let expires = "";
    if (days) {
      const date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "") + expires + "; path=/";
  },
  listGlobalObjects: function() {
    const globals = [];
    // This is a simplified way to list some common global objects.
    // Iterating through all properties of 'window' can be very extensive.
    if (typeof window !== 'undefined') { // Check if in a browser environment
      globals.push('window (itself)');
      if (window.document) globals.push('document');
      if (window.location) globals.push('location');
      if (window.navigator) globals.push('navigator');
      if (window.console) globals.push('console');
      if (window.Object) globals.push('Object (constructor)');
      if (window.Array) globals.push('Array (constructor)');
      if (window.String) globals.push('String (constructor)');
      if (window.Number) globals.push('Number (constructor)');
      if (window.Function) globals.push('Function (constructor)');
      if (window.RegExp) globals.push('RegExp (constructor)');
      if (window.Date) globals.push('Date (constructor)');
      if (window.parseInt) globals.push('parseInt (function)');
      if (window.parseFloat) globals.push('parseFloat (function)');
    }
    return globals;
  }
};

// 2. Create an object using Object.create with our custom prototype.
//    We'll also add a direct property.
const cookieManager = Object.create(cookiePrototype, {
  managerName: {
    value: "My Cookie Manager Instance",
    writable: false,
    configurable: false
  },
  accessGlobalCookie: {
    value: function() {
      // This method directly calls the prototype's getCookie method,
      // which in turn accesses document.cookie.
      console.log(`Accessing document.cookie via ${this.managerName}:`);
      return this.getCookie();
    },
    writable: false,
    configurable: false
  },
  showAllGlobals: {
    value: function() {
      console.log(`\nListing some global objects available to ${this.managerName}:`);
      return this.listGlobalObjects();
    },
    writable: false,
    configurable: false
  }
});

// --- Demonstrate Usage ---

// A. Check if document is available (important for running in different environments)
if (typeof document !== 'undefined' && document.cookie !== undefined) {

  // 1. Set a cookie using our custom object's prototype method
  console.log("Setting a cookie...");
  cookieManager.setCookie("myTestCookie", "HelloFromCookieManager", 1); // Expires in 1 day
  console.log("Cookie set. Now getting all cookies:");

  // 2. Get all cookies using our custom object's method
  const currentCookies = cookieManager.accessGlobalCookie();
  console.log("Current Cookies:", currentCookies);

  // You can also directly call the prototype method:
  // console.log("Current Cookies (direct proto call):", cookieManager.getCookie());

  // 3. Demonstrate accessing the direct property
  console.log("\nManager Name:", cookieManager.managerName);

} else {
  console.log("document.cookie is not available in this environment (e.g., Node.js).");
  console.log("This code is intended to be run in a web browser environment.");
}

// 4. List some global objects
const globals = cookieManager.showAllGlobals();
console.log(globals);

// 5. Accessing a prototype property directly
console.log("\nCalling getCookie directly from the prototype property:", cookieManager.getCookie());
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
👋,
    This project is designed as a cheat sheet/self reference guide for personal use. This is not for any Publication or Teachings. If you wish to learn, LinkedIN Learning offers valuable courses that can aid with the Google Way. All references used for this Project are stated above. Thank You