Google VRP Android Bug Report Example:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A well-structured bug report provides all the necessary information for Google's security team to understand, reproduce, and ultimately fix the vulnerability.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Bug Report Title:
[Vulnerability Type] in [Affected Component/App] on Android 

[Version(s)] - [Brief Impact]
Example: [Arbitrary File Read] in System UI on Android 14 - Local Data Exfiltration

Product/Component: Android (or specific Google app like Google Photos, Google Play Services, etc.)
Affected Version(s): Specify exact Android version(s) (e.g., Android 14, Android 13, specific build numbers like AP1A.240505.002). If the bug is AOSP-related, specify the AOSP version.
Device(s) Tested: (e.g., Pixel 8 Pro, Samsung Galaxy S24, Android Emulator - specify AVD configuration if applicable)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Vulnerability Description:
 * Concise Summary: A clear, one-to-two sentence summary of the vulnerability and its immediate impact.
   * Example: "A vulnerability exists in the System UI component of Android 14 that allows a low-privileged local application to read arbitrary files from the system, including sensitive configuration files and user data, without requiring additional permissions."
 * Detailed Explanation: Elaborate on the vulnerability. What is the root cause? Which security principles are violated (e.g., improper input validation, race condition, insecure deserialization)?
   * Example: "The vulnerability stems from an improper input validation flaw in the WallpaperManagerService.java class when handling setBitmap calls from non-privileged applications. Specifically, the service does not sufficiently validate the source URI provided, allowing a malicious application to construct a file:// URI pointing to sensitive system paths. This bypasses typical file access restrictions (e.g., SELinux policies) for android.permission.READ_EXTERNAL_STORAGE and similar permissions, as the read operation is performed by a trusted system service."
 * Security Impact: Clearly explain the potential consequences of exploitation. Be specific about user harm, data exposure, or system compromise.
   * Example: "Successful exploitation allows a malicious application to read files outside its sandboxed data directory. This could lead to:
     * Exfiltration of sensitive user data (e.g., app-specific configuration files, cached data that isn't fully protected).
     * Disclosure of system-wide configuration data or internal application states, which could aid in further privilege escalation or lead to denial-of-service."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Steps to Reproduce:
Provide clear, numbered, and precise steps that anyone can follow to reliably reproduce the bug. Include all necessary setup, commands, or interactions.
Example:
 * Prerequisites:
   * Android 14 device (Pixel 8 Pro recommended, Build: AP1A.240505.002)
   * ADB debugging enabled.
   * A custom application (PoC.apk) installed on the device. (Attach the PoC.apk to the report).
 * Reproduction Steps:
   * Install PoC.apk on the device: adb install PoC.apk
   * Launch the PoC application.
   * In the PoC app, enter the target file path to read (e.g., /data/system/users/0/settings_secure.xml) into the "File Path" input field.
   * Tap the "Read File" button.
   * Observe the content of settings_secure.xml being displayed in the "File Content" text area within the PoC app.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3. Proof of Concept (PoC):
 * Code: Provide a minimal, self-contained code snippet (Java, Kotlin, C++, etc.) that demonstrates the vulnerability.
   * Example (Simplified Android Java PoC - attach full project as well):
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   // PoC Application: MainActivity.java
import android.app.Activity;
import android.app.WallpaperManager;
import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

public class MainActivity extends Activity {
    private EditText filePathInput;
    private TextView fileContentOutput;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        filePathInput = findViewById(R.id.filePathInput);
        fileContentOutput = findViewById(R.id.fileContentOutput);
        Button readFileButton = findViewById(R.id.readFileButton);

        readFileButton.setOnClickListener(v -> readFile());
    }

    private void readFile() {
        String targetPath = filePathInput.getText().toString();
        if (targetPath.isEmpty()) {
            Toast.makeText(this, "Please enter a file path", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            // This is the vulnerable call that should trigger the read
            WallpaperManager wm = WallpaperManager.getInstance(this);
            // The vulnerability is in how the WallpaperManagerService handles this URI
            // In a real exploit, a more complex URI could be crafted if direct file:// fails
            Uri fileUri = Uri.parse("file://" + targetPath);

            // Attempt to get the input stream through the WallpaperManager (exploiting the bug)
            // This part is illustrative, the actual data exfiltration might happen
            // differently depending on the specific bug (e.g., through a callback or side-channel)
            // For this example, let's assume a simplified mechanism where reading from the URI
            // is implicitly done by the WallpaperManager's internal operations.
            // In a true PoC, you'd likely call a specific method that triggers the vulnerable read.

            // A direct approach to demonstrate:
            // We're mimicking what the WallpaperManager might do internally.
            // This PoC would actually need to reflect how WallpaperManager is misused.
            // For a file read, the PoC might involve getting a bitmap that is actually a file.
            // Let's make a more direct PoC for file read using a content provider or similar
            // if the WallpaperManager is not directly returning data.

            // For a more direct demonstration if the vulnerability is a file read:
            // If the bug allows a system service to load an arbitrary file into memory
            // or return its content, the PoC would reflect that.
            // A simpler, generic file read PoC for demonstrating arbitrary file read:
            InputStream inputStream = getContentResolver().openInputStream(fileUri);
            if (inputStream != null) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
                StringBuilder stringBuilder = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    stringBuilder.append(line).append("\n");
                }
                inputStream.close();
                fileContentOutput.setText(stringBuilder.toString());
                Toast.makeText(this, "File read successfully!", Toast.LENGTH_LONG).show();
            } else {
                fileContentOutput.setText("Failed to get input stream.");
                Toast.makeText(this, "Failed to read file.", Toast.LENGTH_SHORT).show();
            }

        } catch (Exception e) {
            fileContentOutput.setText("Error: " + e.getMessage());
            Toast.makeText(this, "Error reading file: " + e.getMessage(), Toast.LENGTH_LONG).show();
            e.printStackTrace();
        }
    }
}

   * Attachment: Attach the full Android Studio project (as a .zip or .tar.gz) containing the PoC application. This allows Google to easily build and test.
 * Video/Screenshots: Include a short, clear video (MP4, GIF) demonstrating the reproduction steps and the visible impact. Screenshots are also helpful. Upload these directly to the report if possible, rather than linking externally.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. Root Cause Analysis (RCA):
This is highly valued by Google and can increase your reward. Describe why the issue is occurring and ideally, suggest where in the Android source code a patch might be applied.
 * Identify the vulnerable code: Point to specific files, functions, or lines of code in the Android Open Source Project (AOSP) or relevant Google component that contain the vulnerability. Provide links to AOSP Gerrit or relevant repositories if possible.
   * Example: "The vulnerability is located in frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java, specifically within the setBitmap method (or a related method that processes URIs) where the Uri provided by an unprivileged application is not adequately sanitized or checked against allowed paths/schemes before being used to access file system resources."
 * Explain the flaw: Detail the exact flaw (e.g., missing permission check, incorrect type casting, integer overflow, TOCTOU race condition).
   * Example: "The checkUriPermission or equivalent checks are either entirely missing or are applied too late in the execution flow. The file:// scheme is implicitly trusted by the underlying file I/O operations performed by the system service, effectively elevating the privileges of the calling application for arbitrary file access."
 * Proposed Fix (Optional but Recommended): Suggest a fix, even a high-level one. This shows a deep understanding of the vulnerability.
   * Example: "Implement strict URI validation in WallpaperManagerService.java to ensure that file:// URIs can only point to application-specific directories or public storage, and explicitly deny access to sensitive system paths. Alternatively, enforce a stricter permission check for the setBitmap method if the URI scheme is file://, or process such URIs in a sandboxed context."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5. Mitigations Bypassed (if applicable):
If your vulnerability bypasses existing security mitigations (e.g., ASLR, CFI, SELinux, user-granted permissions), explicitly mention them and how they were bypassed. This significantly increases the impact and potential reward.
 * Example: "This vulnerability bypasses standard Android permission model restrictions, as the file read operation is performed by a highly privileged system service (system_server) on behalf of a low-privileged application, circumventing the need for the android.permission.READ_EXTERNAL_STORAGE or android.permission.MANAGE_EXTERNAL_STORAGE permissions."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

6. Environment Details:
 * Android Version: Settings -> About Phone -> Android version
 * Build Number: Settings -> About Phone -> Build number
 * Security Patch Level: Settings -> About Phone -> Android security update
 * Device Model: (e.g., Pixel 8 Pro, Google Pixel 7a)
 * Rooted/Custom ROM: State if your device is rooted or running a custom ROM. Ideally, reproduce on a stock, unrooted device.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

7. Additional Information:
 * Any other relevant details or observations.
 * Mention if the bug is consistently reproducible or intermittent.
 * Any unusual conditions required for reproduction.
Google Android Bug Program URLs
Google operates its Vulnerability Reward Programs (VRPs) through the Bug Hunters platform. This is your primary hub for all Google VRPs, including Android.
 * Google Bug Hunters Portal (Main Entry Point):
   * https://bughunters.google.com/
   * This is where you'll find links to the program rules, submission forms, and learning resources.
 * Android and Google Devices Security Reward Program Rules:
   * https://bughunters.google.com/about/rules/android-friends/6171833274204160/android-and-google-devices-security-reward-program-rules
   * This page details what's in scope, qualifying vulnerabilities, reward ranges, and quality expectations specifically for Android and Google devices. Read this thoroughly before submitting.
 * Security Bug Report Form:
   * You'll access the specific submission form through the Bug Hunters portal. Look for a "Report a security vulnerability" button or similar. The general form for Google products is often accessed via:
     * https://www.google.com/appserve/security-bugs/m2/new (This is a general security bug report form, but for VRP specifically, the Bug Hunters portal is the recommended path.)
 * Google Issue Tracker:
   * https://issuetracker.google.com/
   * While you submit through the Bug Hunters portal, your report will likely be moved to Google's internal Issue Tracker. You might be given access to view the status of your report here.
 * Android Open Source Project (AOSP) Bug Reporting (for non-VRP issues or general Android bugs):
   * If your bug is a general Android issue and not a security vulnerability eligible for a VRP reward, you might report it directly to AOSP's Issue Tracker, though security bugs should go through the VRP.
   * https://source.android.com/setup/contribute/report-bugs (Provides guidance on reporting AOSP bugs).
Key things to remember when reporting:
 * Quality over Quantity: A single, well-researched, and impactful bug report is far better than many low-quality or out-of-scope reports.
 * Be Patient: Triage can take time, especially for complex issues.
 * No Public Disclosure: Do not disclose the vulnerability publicly before Google has fixed it and given you permission. This is a strict rule of the VRP.
 * Read the Rules: Always, always, always read the specific program rules for the Android VRP before you start hunting and reporting.
