Google Chrome (Browser) - Bug/Issue Report: (Non-Security)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Issue Title:
[Type: Bug/Feature] Short, descriptive title of the issue
Example: [Bug] Bookmark manager search occasionally hangs on Windows 11

Component: (Select the most relevant component from the dropdown on the issue tracker)
Example: UI>Browser>Bookmarks

OS: Windows 11 (Specify exact build if relevant, e.g., 22H2)

Chrome Version: (e.g., 126.0.6478.126 Official Build, 64-bit)
Channel: Stable (or Beta, Dev, Canary)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Description:
 * What is the problem?
   * Example: "When using the bookmark manager (accessible via chrome://bookmarks/), searching for a term sometimes causes the UI to freeze for 5-10 seconds before results appear, particularly after typing quickly or after a recent Chrome update."
 * Expected behavior:
   * Example: "The bookmark manager search should respond instantly and display results without any noticeable delay or UI unresponsiveness."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Steps to Reproduce:
Example:
 * Prerequisites:
   * Google Chrome (Version 126.0.6478.126) on Windows 11.
   * At least 100+ bookmarks, including some with special characters or long names.
 * Reproduction Steps:
   * Open Chrome.
   * Navigate to chrome://bookmarks/.
   * In the search bar at the top, rapidly type a search term (e.g., "developer tools").
   * Observe the UI freezing or becoming unresponsive for a short period before results load.
   * (Optional) Try restarting Chrome and repeating to see if it's dependent on a fresh session.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. Screenshots/Video (Highly Recommended):
Example: Attach a short video demonstrating the search bar, typing, and the resulting hang.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. Additional Context:
 * Any specific settings, extensions, or hardware that might be relevant.
 * Example: "This issue seems to occur more frequently after the browser has been open for several hours. No specific extensions seem to be causing it, as it reproduces in Incognito mode too."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Google Chrome (Browser) - Security Vulnerability Report
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For security-critical bugs in the Google Chrome browser itself. These are typically part of the Google Vulnerability Reward Program (VRP).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Report Title (on issues.chromium.org):
[Type: Security] [Vulnerability Type] in [Affected Component] - [Brief Impact]
Example: [Security] [Type Confusion] Type Confusion in V8 due to mishandling of ArrayBufferView
Component: (Select from the Issue Tracker, e.g., Internals>V8, Blink>Layout, Internals>Sandbox)
Example: Internals>V8

OS: Windows, macOS, Linux, Android (specify exact version and architecture if relevant)

Chrome Version: (e.g., 127.0.6500.0 Canary, or a range like "125.x.x.x - 126.x.x.x")

Channel: Canary (or Dev, Beta, Stable - earliest channel found in)
Security Severity: (Critical, High, Medium, Low - based on VRP rules. Provide justification.)

Example: High
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Vulnerability Description:
 * Summary:
   * Example: "A type confusion vulnerability exists in the V8 JavaScript engine, which can lead to arbitrary memory read/write operations and potentially arbitrary code execution in the renderer process when processing specially crafted JavaScript code."
 * Detailed Explanation:
   * Example: "The vulnerability stems from an incorrect type assumption when handling ArrayBufferView objects after certain optimizations are applied by the JIT compiler. Specifically, if an ArrayBufferView is resized or detached during a critical phase, the JIT-compiled code might continue to treat it as its original type, leading to out-of-bounds access. This can be reliably triggered by a series of specific JavaScript operations involving DataView and ArrayBuffer manipulation."
 * Security Impact:
   * Example: "Successful exploitation allows a remote attacker to achieve arbitrary code execution within the Chrome renderer process sandbox. This could be used for information disclosure, tampering with browser state, or as a stepping stone for a sandbox escape to gain control of the host system."


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. Steps to Reproduce:
Example:
 * Prerequisites:
   * Google Chrome Canary (Version 127.0.6500.0) on Windows 10/11.
   * A web server to host the PoC HTML file (or just open file:///).
 * Reproduction Steps:
   * Open Chrome Canary.
   * Navigate to the provided Proof-of-Concept (PoC) HTML file (v8_type_confusion_poc.html). (Attach v8_type_confusion_poc.html and any supporting files like .js to the report).
   * Wait a few seconds for the JavaScript to execute.
   * Observe the browser tab crashing (renderer process termination) or, in some cases, the debugger breaking at the point of vulnerability if attached.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3. Proof of Concept (PoC):
 * Code: Provide the minimal HTML/JavaScript that triggers the bug.
   * Example (Simplified v8_type_confusion_poc.html):
     <!DOCTYPE html>
<html>
<head>
    <title>V8 Type Confusion PoC</title>
</head>
<body>
    <script>
        // Complex JavaScript designed to trigger JIT optimization and then type confusion
        function triggerVulnerability() {
            let arr = new Uint32Array(10);
            let ab = new ArrayBuffer(100);
            let dv = new DataView(ab);

            // Force JIT compilation with specific patterns
            for (let i = 0; i < 10000; i++) {
                dv.setUint32(0, i, true);
                arr[0] = dv.getUint32(0, true);
            }

            // Detach or resize the ArrayBuffer at a critical moment
            // This is highly simplified for example purposes;
            // a real exploit would involve precise timing and object manipulation.
            // Assuming a helper function from a fuzzer or a complex sequence:
            const evil_arraybuffer_view = new Uint8Array(ab);
            // Hypothetically, call a function that detaches the buffer here
            // e.g., evil_arraybuffer_view.buffer = new ArrayBuffer(0); // Not how detach works, but for example

            // Then, perform an operation that accesses the now-confused object
            try {
                dv.setUint32(0x10000000, 0xDEADBEEF, true); // Attempt out-of-bounds write
            } catch (e) {
                console.error("Caught expected error, but UAF/Type Confusion may still have occurred:", e);
            }
            console.log("PoC executed. Check for crash/debugger break.");
        }

        triggerVulnerability();
    </script>
</body>
</html>

 * Video/Screenshots: Crucial for security reports. Attach a video showing the crash.
 * Crash ID: From chrome://crashes.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4. Root Cause Analysis (RCA) (Optional but Highly Valued):
 * Vulnerable Code: Point to specific files or functions in the Chromium source (e.g., v8/src/objects/js-array-buffer.cc, v8/src/compiler/representation-selector.cc).
 * Proposed Fix (Optional): Suggest how the type confusion could be prevented (e.g., stricter type checks in JIT, better lifecycle management of ArrayBufferView objects).
Chrome Extensions - Bug Report (Third-Party Extensions)
For bugs in third-party extensions (not developed by Google). You should first try to report these to the extension developer.
Where to Report:
 * Directly to the Extension Developer: Look for contact information on the extension's page in the Chrome Web Store (usually under "Support" or "Details"), or check their official website, GitHub repository, or support forum. This is the primary method.
 * Chrome Web Store Review/Support Tab: As a last resort, if no other contact is available, leave a review or use the "Support" tab on the extension's page in the Chrome Web Store to describe the bug.
What to Include in Your Report (to the developer):
 * Extension Name & Version: (e.g., "AdBlock Plus 3.11.2")
 * Chrome Version & OS: (e.g., "Chrome 126.0.6478.126 on Windows 10")
 * Clear Description of Bug: What's happening, what should happen.
 * Steps to Reproduce: Detailed steps to trigger the bug.
 * Screenshots/Video: Visual evidence.
 * Any relevant console errors: Open Chrome's developer tools (F12), go to the "Console" tab, and look for errors when the bug occurs.
Chrome Extensions - Security Vulnerability Report (Third-Party Extensions)
For security vulnerabilities in third-party extensions.
Where to Report:
 * Directly to the Extension Developer: This is the primary and most ethical method for responsible disclosure. Follow their security policy if they have one (e.g., on their website or GitHub).
 * Report to Google (if unresponsive or policy violation): If the developer is unresponsive (no fix or communication after a reasonable time, e.g., 45-90 days), or if the extension is clearly malicious/violates Chrome Web Store policies (e.g., secretly injecting ads, stealing data), you can report it to Google.
What to Include in Your Report (to the developer or Google):
 * Extension Name & ID: (e.g., "AdBlock Plus", ID: cfhdojbkjhnklbpkdaibdccddilifddb) - Get the ID from chrome://extensions/.
 * Chrome Version & OS:
 * Vulnerability Type: (e.g., "XSS", "Information Disclosure", "Privilege Escalation", "Malware")
 * Detailed Description: How it works, what it affects.
 * Steps to Reproduce: Precise steps, including any required user interaction or specific website visits.
 * Proof of Concept (PoC): Minimal code, payload, or URL to demonstrate.
 * Impact: What an attacker could achieve.
 * Screenshots/Video: Essential for security reports.
 * Console Errors/Network Traffic: Relevant developer tool output (Console, Network tabs).


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Google's Official Chrome Extensions - Security Vulnerability Report:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For vulnerabilities in extensions developed and maintained by Google (e.g., Google Keep, Google Translate, Google Docs Offline). These fall under the Google Vulnerability Reward Program (VRP).
Where to Report:
 * Google Bug Hunters Portal:
   * https://bughunters.google.com/
   * You'll use the general "Report a security vulnerability" form, selecting "Chrome" as the product and specifying the extension in the title/description.
What to Include in Your Report:
 * Follow the same structure as a Google Chrome (Browser) - Security Vulnerability Report above, but specify the extension name and ID clearly in the title and description.
 * Ensure the component selected is appropriate (e.g., Chrome or a specific extension-related component if available).
URLs for Filing Reports

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here are the direct links and key resources:
For Google Chrome (Browser) Bugs & Vulnerabilities:
 * Chromium Issue Tracker (General Bugs & Security Vulnerabilities):
   * Main Page: https://issues.chromium.org/
   * File a New Issue: https://issues.chromium.org/new
     * Important: For security vulnerabilities, select the "Security Bug" template when creating the new issue. This keeps it private initially.
 * Chrome Vulnerability Reward Program (VRP) Rules (on Google Bug Hunters):
   * https://bughunters.google.com/about/rules/chrome-friends/5745167867576320/chrome-vulnerability-reward-program-rules
   * This details what qualifies for a reward.
 * Chromium Project Bug Reporting Guidelines:
   * https://www.chromium.org/for-testers/bug-reporting-guidelines/
   * Excellent resource for how to write effective bug reports.
For Chrome Extensions (Third-Party):
 * Chrome Web Store - Find Extension Contact Info:
   * Go to the extension's page in the Chrome Web Store. Look for "Support" tab, "Details," or "Developer Website."
 * Report Abuse (for malicious/policy-violating extensions, as a last resort):
   * On the extension's page in the Chrome Web Store, scroll down and look for a "Report Abuse" link.
   * This is typically for severe violations like malware, phishing, or policy breaches, not for reporting a simple bug that the developer isn't fixing.
For Google's Official Chrome Extensions (Security Vulnerabilities):
 * Google Bug Hunters Portal (Main Entry Point):
   * https://bughunters.google.com/
   * Use the "Report a security vulnerability" button and then select "Chrome" as the product, providing the extension details in your report.
General Advice for All Reports:
 * Search First: Always search the relevant issue tracker or existing reports before submitting a new one.
 * Be Specific: Provide as much detail as possible.
 * Clear and Concise: Get straight to the point in your summary and steps.
 * Visual Evidence: Screenshots and videos significantly help.
 * Responsible Disclosure: Especially for security vulnerabilities, do not disclose them publicly until they are fixed and you have received permission from Google/the developer.
