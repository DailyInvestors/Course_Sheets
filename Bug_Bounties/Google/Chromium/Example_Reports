Google Chromium Bug/Issue Report Example: (Non-Security)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Issue Title:
[
Type: Bug/Feature] Short, descriptive title of the issue
Example: [Bug] PDF Viewer fails to render specific embedded fonts on macOS

Component: (Choose the most appropriate component from the dropdown on the issue tracker, e.g., Internals>PDF, UI>Browser, Blink>Layout, Platform>Windows, Internals>Network)
Example: Internals>PDF
OS: macOS 14.5 Sonoma
Chrome Version: (e.g., 126.0.6478.126 Official Build, 64-bit)

Channel: Stable (or Beta, Dev, Canary if applicable)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Description:
 * What is the problem? Clearly explain what's wrong or what's missing.
   * Example: "When opening certain PDF files (especially those generated by [specific software], e.g., LaTeX with XeTeX), the embedded fonts are not rendered correctly in Chrome's built-in PDF viewer. Text appears as garbled characters or default fallback fonts instead of the intended typography."
 * Expected behavior: Describe how it should work.
   * Example: "The PDF viewer should accurately display all embedded fonts within the document, matching the rendering in other PDF viewers (e.g., Adobe Acrobat Reader, macOS Preview)."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Steps to Reproduce:
Provide precise, numbered steps that can be followed to consistently reproduce the issue.
Example:
 * Prerequisites:
   * Google Chrome (Version 126.0.6478.126 or later) on macOS.
   * A sample PDF file that exhibits the font rendering issue. (Attach this file to the bug report).
   * Example: sample_bad_font.pdf
 * Reproduction Steps:
   * Open Chrome.
   * Drag and drop sample_bad_font.pdf directly into a Chrome tab, or navigate to its local file path (file:///path/to/sample_bad_font.pdf).
   * Observe the font rendering in the Chrome PDF viewer.
   * Compare with how the same PDF renders in macOS Preview.app.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3. Screenshots/Video (Highly Recommended):
Include visual aids to demonstrate the bug.
Example:
 * Screenshot 1: Chrome PDF viewer showing incorrect fonts (Attach image)
 * Screenshot 2: macOS Preview.app showing correct fonts (for comparison) (Attach image)
 * (Optional) Short Video/GIF: (Attach a video demonstrating opening the PDF and the rendering issue)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4. Additional Context:
 * Any further information that might be relevant.
 * Are extensions enabled? Try reproducing in Incognito mode to rule out extensions.
 * Are flags enabled? (e.g., chrome://flags)
 * Hardware/Software environment specifics.
 * Example: "This issue is reproducible even with all Chrome extensions disabled and in Incognito mode. It appears to be related to Type 1 fonts embedded in the PDF, specifically when they are subsetted."



Google Chromium Security Bug Report Example:


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Issue Title:
[Type: Security] [Vulnerability Type] in [Affected Component] - [Brief Impact]
Example: [Security] [UAF] Use-After-Free in WebAudio due to improper lifecycle management
Component: (Select appropriate component, e.g., Blink>WebAudio, Internals>IPC, Blink>Bindings)
Example: Blink>WebAudio
OS: Windows 10/11, macOS, Linux, Android (specify exact version)
Chrome Version: (e.g., 127.0.6500.0 Canary, or a specific range like "125.x.x.x - 126.x.x.x")
Channel: Canary (or Dev, Beta, Stable - indicate the earliest channel you found it in)
Security Severity: (Choose from Critical, High, Medium, Low - based on Chromium guidelines. If unsure, let them decide, but provide impact.)
Example: High

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Vulnerability Description:
 * Summary: Concise statement of the vulnerability and its direct security impact.
   * Example: "A Use-After-Free (UAF) vulnerability exists in the WebAudio component, allowing a remote attacker to achieve arbitrary code execution or cause a denial of service (browser crash) by crafting a malicious web page."
 * Detailed Explanation: Explain the technical details of the flaw. What is the root cause (e.g., memory corruption, logic error, race condition, insufficient input validation)?
   * Example: "The UAF occurs in the AudioWorkletNode object's lifecycle management. Specifically, a race condition can be triggered between the disconnect() call and a subsequent operation on a JavaScript-controlled AudioParam associated with the node. If the AudioWorkletNode is freed prematurely while an operation is queued on its AudioParam, a dereference of the freed memory occurs, leading to a UAF."
 * Security Impact: Clearly state what an attacker could potentially achieve.
   * Example: "Successful exploitation could lead to arbitrary code execution within the browser's renderer process sandbox. While the sandbox provides containment, a successful exploit could lead to information disclosure or further compromise if combined with a sandbox escape vulnerability. At minimum, it reliably leads to a high-severity browser crash (Denial of Service)."


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Steps to Reproduce:
Provide exact, minimal, and consistently reproducible steps.
Example:
 * Prerequisites:
   * Google Chrome Canary (Version 127.0.6500.0 or later)
   * A web server to host the PoC HTML page (or just open file:///).
 * Reproduction Steps:
   * Open Chrome Canary.
   * Navigate to the provided Proof-of-Concept (PoC) HTML file (poc.html). (Attach poc.html to the report).
   * Click the "Trigger Vulnerability" button.
   * Observe the browser tab crashing (renderer process termination) or, in some cases, the browser window itself.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


3. Proof of Concept (PoC):
 * Code: Provide the minimal HTML/JavaScript that triggers the bug.
   * Example (Simplified poc.html - attach full file):
     <!-- end list -->
   <!DOCTYPE html>
<html>
<head>
    <title>WebAudio UAF PoC</title>
</head>
<body>
    <button id="trigger">Trigger Vulnerability</button>
    <script>
        let audioContext;
        let audioWorkletNode;

        document.getElementById('trigger').onclick = async () => {
            audioContext = new AudioContext();
            await audioContext.audioWorklet.addModule('worklet.js');

            // Create a gain node and connect to destination
            const gainNode = audioContext.createGain();
            gainNode.connect(audioContext.destination);

            // Create the vulnerable AudioWorkletNode
            audioWorkletNode = new AudioWorkletNode(audioContext, 'test-processor');

            // Connect the vulnerable node (important for lifecycle)
            audioWorkletNode.connect(gainNode);

            // Trigger the UAF (simplified, actual trigger might be more complex)
            // This simulates a race condition where the node might be freed
            // while its param is still being accessed.
            setTimeout(() => {
                audioWorkletNode.disconnect();
                // Attempt to access a freed AudioParam
                audioWorkletNode.parameters.get('gain').setValueAtTime(0.5, audioContext.currentTime + 1);
            }, 100); // Small delay to create race

            console.log("Attempting to trigger UAF...");
        };
    </script>
</body>
</html>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   * (You would also need a worklet.js file for the AudioWorklet.)
 * Video/Screenshots: Absolutely essential for security reports.
   * Example: Attach webaudio_uaf_crash.mp4 showing the crash.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4. Root Cause Analysis (RCA) (Optional but Highly Valued):
 * Vulnerable Code: Point to specific files or functions in Chromium's source code. Provide links to chromium.googlesource.com if possible.
   * Example: "The UAF is suspected to be in third_party/blink/renderer/platform/audio/audio_worklet_node.cc or related lifetime management code, where the AudioWorkletNode's internal state might be cleaned up before all pending AudioParam operations are completed, leading to a dangling pointer when setValueAtTime is called on a released AudioParam."
 * Proposed Fix (Optional):
   * Example: "Implement stronger synchronization or reference counting to ensure that the AudioWorkletNode and its associated AudioParam objects are not deallocated until all operations targeting them have finished or are safely cancelled."


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5. Additional Information:
 * Crash ID (if applicable): Check chrome://crashes and provide the crash ID.
 * Fuzzer output (if found by fuzzer).
 * Symbolized stack trace (if available).
Google Chromium Bug Reporting URLs
Google uses a unified issue tracker for Chromium and related projects.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Chromium Issue Tracker (Main Entry Point):
   * https://issues.chromium.org/
   * This is the central place to search for existing bugs and to file new ones.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * File a New Chromium Bug/Issue:
   * https://issues.chromium.org/new
   * This is the direct link to start a new bug report. You'll need a Google Account to sign in.
   * For Security Bugs: When creating a new issue, select the "Security Bug" template from the dropdown. This will ensure the bug is initially restricted to Google security team members until it's fixed and ready for public disclosure.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Chromium Project Bug Reporting Guidelines:
   * https://www.chromium.org/for-testers/bug-reporting-guidelines/
   * Highly Recommended Reading. This page provides detailed instructions on how to write good bug reports, including specifics for crashes, hangs, and web compatibility issues.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

* Chrome Vulnerability Reward Program (VRP) Rules (on Google Bug Hunters):
   * https://bughunters.google.com/about/rules/chrome-friends/5745167867576320/chrome-vulnerability-reward-program-rules
   * This page outlines the specific rules, scope, and reward eligibility for security vulnerabilities in Chrome/Chromium. While you file the bug on issues.chromium.org, the VRP rules govern what qualifies for a reward.
 * Chromium Security Team Contact (for very sensitive, non-Bug-Hunters-eligible issues):
   * security@chromium.org
   * This email is primarily for non-bug bounty security concerns, or if you have specific questions that can't be answered via the public documentation. For a direct vulnerability report that you expect a reward for, use the issues.chromium.org/new form with the Security Bug template.
Always remember these points for Chromium reports:
 * Search First: Always search the issue tracker (issues.chromium.org) before filing a new bug to avoid duplicates. Star existing issues if you're affected.
 * Reproducibility is Key: Your report's value heavily depends on clear, consistent reproduction steps.
 * Minimal PoC: For security issues, a minimal, self-contained PoC is crucial.
 * Responsible Disclosure: For security vulnerabilities, always follow Google's responsible disclosure policy. Do not disclose the vulnerability publicly until it's fixed and Google has given the go-ahead (typically 14 weeks after the fix lands in stable).
 * Google Account: You'll need a Google Account to report issues.
